<?php

/**
 * @file
 * This module provides Checkout.com payment gateway integration to Ubercart,
 * Ubercart Checkoutpayment offers a PCI-compliant way to process payments.
 */

const CHECKOUT_API_RESPONSE_CODE_APPROVED       = 10000;
const CHECKOUT_API_RESPONSE_CODE_APPROVED_RISK  = 10100;
const CHECKOUT_API_PLUGIN_VERSION               = '7.x-2.9'; //TODO
const HOSTED_URL_SANDOX             = 'https://secure.checkout.com/sandbox/payment/';
const HOSTED_URL_LIVE               = 'https://secure.checkout.com/payment/';
const REDIRECT_URL                  = '?q=/uc_checkoutpayment/process_charge';
const CANCEL_URL                    = '?q=/uc_checkoutpayment/fail';
const EVENT_TYPE_CHARGE_SUCCEEDED   = 'charge.succeeded';
const EVENT_TYPE_CHARGE_CAPTURED    = 'charge.captured';
const EVENT_TYPE_CHARGE_REFUNDED    = 'charge.refunded';
const EVENT_TYPE_CHARGE_VOIDED      = 'charge.voided';
const EVENT_TYPE_INVOICE_CANCELLED  = 'invoice.cancelled';

/**
 * Implements hook_init().
 */
function uc_checkoutpayment_init() {
  global $conf;
  $conf['i18n_variables'][] = 'uc_checkoutpayment_method_title';
  $conf['i18n_variables'][] = 'uc_checkoutpayment_checkout_button';
}

/**
 * Implements hook_variable_info().
 */
function uc_checkoutpayment_variable_info($options) {
  $variable['uc_checkoutpayment_method_title'] = array(
    'title' => t('Checkout.com - method title'),
    'description' => t('Name for Checkout.com payment method presented to the customer.'),
  );
  $variable['uc_checkoutpayment_checkout_button'] = array(
    'title' => t('Checkout.com - checkout button'),
    'description' => t('Text on checkout button when paying via Checkout.com.'),
  );

  return $variable;  
}

/**
 * Implements hook_menu().
 */
function uc_checkoutpayment_menu() {
  $items = array();
  
  $items['checkoutapi/process'] = array(
    'title' => 'Ipn checkout',
    'page callback' => 'uc_checkoutpayment_process_order',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['uc_checkoutpayment/success'] = array(
    'title' => 'Success page',
    'page callback' => 'uc_checkoutpayment_success_order',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['uc_checkoutpayment/process_charge'] = array(
    'title' => 'Create Order page',
    'page callback' => 'uc_checkoutpayment_process_charge',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['uc_checkoutpayment/fail'] = array(
    'title' => 'Fail Order page',
    'page callback' => 'uc_checkoutpayment_fail_order',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Declaring new payment method in Ubercart
 * Implements hook_uc_payment_method().
 */
function uc_checkoutpayment_uc_payment_method() {  
  $methods[] = array(
    'id' => 'cko',
    'name' => t('Checkout.com'),
    'title' => variable_get('uc_checkoutpayment_method_title',
      t('Credit / Debit cards (Checkout.com)')),
    'desc' => t('Redirect to Checkout.com to pay.'),
    'callback' => 'uc_payment_method_checkoutpayment',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implements hook_payment_method_callback($op, &$arg1, $silent = FALSE)
 */
function uc_payment_method_checkoutpayment($op, &$order) {
  module_load_include('module', 'uc_credit', 'uc_credit');
  
  switch ($op) {
    case 'settings':
      global $base_url;
      $form['checkoutpayment_help_text'] = array(
        '#markup' => '<div class="help">' . t('<h4><strong>Checkout.com Payment Settings</strong></h4><p>Go to https://sandbox.checkout.com to properly install this module.</p>', array('%base_url' => $base_url)) . '</div>',
      );

      $settings = uc_checkoutpayment_payment_method()['settings'];

      $form['checkoutpayment_account'] = array(
        '#type' => 'fieldset',
        '#title' => t('Account settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['checkoutpayment_account']['private_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Secret Key'),
        '#required' => TRUE,
        '#description' => t('The Checkout.com account secret API key to use .'),
        '#default_value' => $settings['private_key'],
      );
    
      $form['checkoutpayment_account']['public_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Public Key'),
        '#required' => TRUE,
        '#description' => t('The Checkout.com account publishable API key to use.'),
        '#default_value' => $settings['public_key'],
      );

      $form['checkoutpayment_account']['webhook_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Webhook shared private key'),
        '#description' => t('The private shared key to check that the message comes from Checkout.'),
        '#default_value' => $settings['webhook_key'],
      );
    
      $form['checkoutpayment_account']['mode'] = array(
        '#type' => 'select',
        '#title' => t('Endpoint Url Mode'),
        '#description' => t('Perform transactions on the production server or on the testing server.'),
        '#default_value' => $settings['mode'],
        '#options' => array(
          'live' => t('Live'),
          'sandbox' => t('Sandbox'),
        ),
      );
    
      $form['checkoutpayment_transaction'] = array(
        '#type' => 'fieldset',
        '#title' => t('Payment settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['checkoutpayment_transaction']['payment_action'] = array(
        '#type' => 'select',
        '#title' => t('Transaction Method'),
        '#description' => t('The processing method to use for each transaction.'),
        '#default_value' => $settings['payment_action'],
        '#options' => array(
          UC_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
          UC_CREDIT_AUTH_ONLY => t('Authorization only (requires manual capture after checkout)'),
        ),
      );
    
      $form['checkoutpayment_transaction']['autocaptime'] = array(
        '#type' => 'textfield',
        '#title' => t('Set Gateway auto capture time.'),
        '#description' => t('Set how long will the payment be capture.'),
        '#default_value' => $settings['autocaptime'],
      );

      $form['checkoutpayment_transaction']['paymentMode'] = array(
        '#type' => 'select',
        '#title' => t('Payment Mode'),
        '#options' => array(
          'cards' => t('Card'),
          'localpayments' => t('Local Payment'),
          'mixed' => t('Mixed')
        ),
        '#default_value' => $settings['paymentMode'],
      );
    
      $form['checkoutpayment_transaction']['is3D'] = array(
        '#type' => 'select',
        '#title' => t('Enable 3D'),
        '#description' => t('If you want to process all transactions as 3D secure, select Yes'),
        '#options' => array(
          '1' => t('No'),
          '2' => t('Yes'),
        ),
        '#default_value' => $settings['is3D'],
      );
    
      $form['checkoutpayment_transaction']['timeout'] = array(
        '#type' => 'textfield',
        '#title' => t('Set Gateway timeout.'),
        '#description' => t('Set how long request timeout on server.'),
        '#default_value' => $settings['timeout'],
      );
    
      $form['checkoutpayment_ui'] = array(
        '#type' => 'fieldset',
        '#title' => t('Personalisation'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['checkoutpayment_ui']['cko_integration'] = array(
        '#type' => 'select',
        '#title' => t('Integration method'),
        '#description' => t('Change the language of the checkout hosted page'),
        '#options' => array(
          'hosted' => t('Hosted'),
          'lightbox' => t('Overlay (Only cards)'),
          'embedded' => t('Embedded (Only cards)'),
        ),
        '#default_value' => $settings['cko_integration'],
      );

      $form['checkoutpayment_ui']['cko_render_mode'] = array(
        '#type' => 'select',
        '#title' => t('Lightbox Render Mode'),
        '#description' => t('Choose how the Lightbox will be rendered on the review page.'),
        '#options' => array(
          0 => t('Icons and Pay Button'),
          1 => t('Pay Button only'),
          3 => t('Active Icons only'),
        ),
        '#default_value' => $settings['cko_render_mode'],
      );

      $form['checkoutpayment_ui']['logourl'] = array(
        '#type' => 'textfield',
        '#title' => t('Logo URL'),
        '#description' => t('This is the setting to display the logo on checkout.js (Max size: 180 x 36)'),
        '#default_value' => $settings['logourl'],
      );
    
      $form['checkoutpayment_ui']['themecolor'] = array(
        '#type' => 'textfield',
        '#title' => t('Theme color'),
        '#description' => t('Set theme color for checkout hosted'),
        '#default_value' => $settings['themecolor'],
      );
    
      $form['checkoutpayment_ui']['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#description' => t('Add a title on the hosted payment page'),
        '#default_value' => $settings['title'],
      );

      $form['checkoutpayment_ui']['subtitle'] = array(
        '#type' => 'textfield',
        '#title' => t('Subtitle'),
        '#description' => t('Add a subtitle on the hosted payment page'),
        '#default_value' => $settings['subtitle'],
      );

      $form['checkoutpayment_ui']['button_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Button label'),
        '#description' => t('Change the button label on the hosted payment page'),
        '#default_value' => $settings['button_label'],
      );

      $form['checkoutpayment_ui']['cko_language'] = array(
        '#type' => 'select',
        '#title' => t('Language'),
        '#description' => t('Change the language of the checkout hosted page'),
        '#options' => array(
          'DE-DE' => t('German'),
          'NL-NL' => t('Dutch'),
          'FR-FR' => t('French'),
          'KR-KR' => t('Korean'),
          'IT-IT' => t('Italian'),
          'EN-GB' => t('English'),
        ),
        '#default_value' => $settings['cko_language'],
      );
    
      $form['checkoutpayment_ui']['currencycode'] = array(
        '#type' => 'select',
        '#title' => t('Widget currency format'),
        '#description' => t('Display currency code or currency symbol on the checkout hosted'),
        '#options' => array(
          'true' => t('Code'),
          'false' => t('Symbol'),
        ),
        '#default_value' => $settings['currencycode'],
      );

      return $form;
      break;

    case 'cart-details':
      //return array('#markup' => t('placeholder text TODO')); // Under the payment method selection pane, when checkout.com is selected
      break;
    
    case 'cart-process':
      //return array('#markup' => t('placeholder text TODO 2')); // TODO
      break;

    case 'cart-review':
      break;

    case 'customer-view':
      return array('#markup' => t('placeholder text TODO 4')); // Don't know where this happens
      break;
    
    case 'order-delete':
      // When order is deleted or cancelled
      break;

    case 'order-details':
      // Shown to admin when edditing orders
      break;
      
    case 'order-load': 
      // Called from hook_uc_order('load') when this payment method is selected for the order.
      break;

    case 'order-process':
      // Called when an order has been edited by an administrator.
      break;

    case 'order-save':
      // Called from hook_uc_order('save') when this payment method is selected for the order.
      break;

    case 'order-submit':
      // Called from hook_uc_order('submit') when this payment method is selected for the order.
      break;
      
    case 'order-view':
      return drupal_get_form('admin_order_payment_action_form', $order);
      break;
    }
}

function admin_order_payment_action_form($form, &$form_state, $order){
  $form['order_id'] = array(
    '#type'   => 'hidden',
    '#value'  => $order->order_id,
    '#name'   => 'order_id'
  );
  
  if(!is_captured($order->order_id)) {
    $form['capture'] = array(
      '#type'   => 'submit',
      '#value'  => t('Full Capture'),
      '#name'   => 'capture'
    );
  }
  elseif(uc_payment_balance($order) != $order->order_total) {
    $form['refund'] = array(
      '#type'   => 'submit',
      '#value'  => t('Full Refund'),
      '#name'   => 'refund'
    );
  }
  else{
    $form['message'] = array(
      '#markup' =>  t('Payment has been fully refunded.'),
    );
  }

  return $form;
}

function admin_order_payment_action_form_submit($form, &$form_state) {
  $order_id = $form_state['values']['order_id'];
  $values = $form_state['input'];

  $payment_method = uc_checkoutpayment_payment_method();
  $instance = uc_checkoutpayment_get_instance(); 
  $order = uc_order_load($order_id);

  if(!is_captured($order_id) && isset($values['capture'])) {
    $data = $instance->captureCharge($order, $payment_method, ($order->order_total * 100));
    drupal_set_message(t("The payment was captured."), 'status');
  }
  elseif(is_captured($order_id) && isset($values['refund'])) {
    $ammount = $order->order_total - uc_payment_balance($order);
    $data = $instance->refundCharge($order, $payment_method, ($ammount * 100));
    drupal_set_message(t("The payment was refunded."), 'status');
  }

  sleep(1);
  drupal_goto(current_path());
}

/**
 * Implements hook_form_alter() for uc_cart_checkout_review_form().
 */
function uc_checkoutpayment_form_uc_cart_checkout_review_form_alter(&$form, &$form_state) {
  if (($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);
    $_SESSION['cko_contextid'] = $order_id;

    if ($order->payment_method == 'cko') {
      $cko_integration = uc_checkoutpayment_payment_method()['settings']['cko_integration'];
      
      unset($form['actions']['submit']);

      switch ($cko_integration) {
        case 'hosted':
          $form['#prefix'] = '<table style="display: inline;">
            <tr class="review-button-row-inner"><td>';
          $preparedForm = drupal_get_form('uc_checkoutpayment_form', $order);
          $form['#suffix'] = '</td><td>' . drupal_render($preparedForm) . '</td></tr></table>';
          break;
        
        default:
          $form['#prefix'] = '<table style="display: inline;">
            <tr><td colspan="2"> '. checkout_payment_widget($order) .' </td></tr>
            <tr class="review-button-row-inner"><td>';
          $form['#suffix'] = '</td></tr></table>';
          break;
      }      
    }
  }
}

/**
 * Step: Review page
 * Create form to POST to hosted page
 */
function uc_checkoutpayment_form($form, &$form_state, $order) {
  global $base_url;

  $payment_method = uc_checkoutpayment_payment_method();
  $settings       = $payment_method['settings'];

  $instance = uc_checkoutpayment_get_instance();
  $data     = $instance->getExtraInit($order, $payment_method);

  // Settings
  $hppUrl   = $settings['mode'] == 'sandbox' ? HOSTED_URL_SANDOX : HOSTED_URL_LIVE;
  $publicKey      = $settings['public_key'];
  $paymentMode    = $settings['paymentMode'];
  $themeColor     = $settings['themecolor'];
  $title          = $settings['title'];
  $logoUrl        = $settings['logourl'];
  $currencycode   = $settings['currencycode'];
  $subtitle       = $settings['subtitle'];
  $buttonLabel    = $settings['button_label'];
  $cko_language   = $settings['cko_language'];

  $cardFormMode   = "cardTokenisation";
  $redirectUrl    = $base_url . REDIRECT_URL;
  $cancelUrl      = $base_url . CANCEL_URL;

  // Order details
  $contextId      = $order->order_id;
  $paymentToken   = $data['script']['paymentToken'];
  $customerEmail  = $data['script']['email'];
  $value          = $data['script']['amount'];
  $currency       = $data['script']['currency'];
  
  $billingDetails = '{
    "addressLine1":"'.$order->billing_street1     .'",
    "addressLine2":"'.$order->billing_street2     .'",
    "postcode":"    '.$order->billing_postal_code .'",
    "country":"     '.uc_get_country_data(array('country_id' => $order->billing_country))[0]['country_iso_code_2']     .'",                                                  
    "city":"        '.$order->billing_city        .'",
    "state":"       '.$order->billing_zone        .'"
  }'; 

  // Format data for form
  $data = array(
    'publicKey'       => $publicKey,
    'paymentToken'    => $paymentToken,
    'customerEmail'   => $customerEmail,
    'value'           => $value,
    'currency'        => $currency,
    'cardFormMode'    => $cardFormMode,
    'paymentMode'     => $paymentMode,
    'redirectUrl'     => $redirectUrl,
    'cancelUrl'       => $cancelUrl,
    'contextId'       => $contextId,
    'themeColor'      => $themeColor,
    'title'           => $title,
    'logoUrl'         => $logoUrl,
    'billingDetails'  => $billingDetails,
    'localisation'    => $cko_language,
    'subtitle'        => $subtitle,
    'buttonLabel'     => $buttonLabel,
    'useCurrencyCode' => $currencycode,
  );

  // Set form objects
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array(
        '#type' => 'hidden', 
        '#value' => t($value),
        '#attributes' => array(
          'name' => array($name),
        )
      );
    }
  }

  // Set submit button
  $form['#action'] = url($hppUrl);
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t(variable_get('uc_checkoutpayment_checkout_button', 'Proceed with payment')),
  );

  return $form;
}

/**
 * Step: Review page
 * Create JS widget
 */
function checkout_payment_widget($order){  
  global $base_url;

  $payment_method = uc_checkoutpayment_payment_method();
  $settings       = $payment_method['settings'];

  $instance = uc_checkoutpayment_get_instance();
  $data     = $instance->getExtraInit($order, $payment_method);

  // Settings
  $hppUrl   = $settings['mode'] == 'sandbox' ? HOSTED_URL_SANDOX : HOSTED_URL_LIVE;
  $publicKey      = $settings['public_key'];
  $paymentMode    = $settings['paymentMode'];
  $themeColor     = $settings['themecolor'];
  $title          = $settings['title'];
  $logoUrl        = $settings['logourl'];
  $currencycode   = $settings['currencycode'];
  $subtitle       = $settings['subtitle'];
  $buttonLabel    = $settings['button_label'];
  $cko_language   = $settings['cko_language'];
  $cko_render_mode = $settings['cko_render_mode'];
  $appmode        = 'lightbox';

  $cardFormMode   = "cardTokenisation";
  $redirectUrl    = $base_url . REDIRECT_URL;
  $cancelUrl      = $base_url . CANCEL_URL;

  // Order details
  $contextId      = $order->order_id;
  $paymentToken   = $data['script']['paymentToken'];
  $customerEmail  = $data['script']['email'];
  $value          = $data['script']['amount'];
  $currency       = "EUR"; //$data['script']['currency'];
  
  if($settings['cko_integration'] == 'embedded'){
    $title = $subtitle = $logoUrl = '';
    $appmode = 'embedded';
  }

  return t("
  
    <form class=\"payment-form\" method=\"POST\" action=\"" . $redirectUrl . "\">
      <script>
        window.CKOConfig = {
          publicKey: '"       . $publicKey . "',
          customerEmail: '"   . $customerEmail . "',
          value: "            . $value . ",
          currency: '"        . $currency . "',
          formButtonLabel: '" . $buttonLabel . "',
          themeColor: '"      . $themeColor . "',
          title: '"           . $title . "',
          subtitle: '"        . $subtitle . "',
          logoUrl: '"         . $logoUrl . "',
          localisation: '"    . $cko_language . "',
          useCurrencyCode: '" . $currencycode . "',
          appMode: '"         . $appmode . "',
          renderMode: '"      . $cko_render_mode . "',
        };
      </script>
      <script async src=\"https://cdn.checkout.com/v2/sandbox/js/checkout.js\"></script>
    </form>

  ");
}

/**
 * Retrieves all active instances definitions.
 */
function uc_checkoutpayment_get_instance() {
  
  module_load_include('php', 'uc_checkoutpayment', 'includes/autoload');
  return CheckoutApi_Lib_Factory::getInstance('methods_creditcard');
}

/**
 * Process payment with card token
 */
function uc_checkoutpayment_process_charge(){

  if($_REQUEST['cko-card-token']){
    $cardToken = $_REQUEST['cko-card-token'];

    if($_SESSION['cko_contextid'] != null){
      $order = uc_order_load($_SESSION['cko_contextid']);
    } else {
      drupal_goto();
    }
  }

  module_load_include('php', 'uc_checkoutpayment', 'includes/autoload');

  $payment_method = uc_checkoutpayment_payment_method();

  $instance = uc_checkoutpayment_get_instance();
  $data     = $instance->getExtraInit($order, $payment_method);

  $Api = CheckoutApi_Api::getApi(array('mode'=>$payment_method['settings']['mode']));

  $autoCapture       = $payment_method['settings']['payment_action'] == 'authorize' ? CheckoutApi_Client_Constant::AUTOCAPUTURE_AUTH : CheckoutApi_Client_Constant::AUTOCAPUTURE_CAPTURE;  
  $autoCapTime       = $payment_method['settings']['autocaptime'];
  $chargeMode        = $payment_method['settings']['is3D'];
  $integration_type  = $payment_method['settings']['cko_integration'];

  $order_total      = $data['script']['amount'];
  $currency         = $data['script']['currency'];
  $billing_address  = $data['script']['billingDetails'];
  $shipping_address = $data['script']['shippingDetails'];
  $customerName     = $data['script']['name'];
  $email            = $data['script']['email'];

  if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
      $ip = $_SERVER['HTTP_CLIENT_IP'];
  } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
      $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
  } else {
      $ip = $_SERVER['REMOTE_ADDR'];
  }

  $config = array();
  $config['postedParam'] = array (
      'trackId'           => $order->order_id,
      'value'             => $order_total,
      'currency'          => $currency,
      'autoCapture'       => $autoCapture,
      'chargeMode'        => $chargeMode,
      'customerIp'        => $ip,
      'autoCapTime'       => $autoCapTime,
      'email'             => $email,
      'customerName'      => $customerName,
      'billingDetails'    => $billing_address,
      'shippingDetails'   => $shipping_address,
      'metadata'          => array(
           'server'            => $_SERVER['HTTP_USER_AGENT'],
           'plugin_version'    => CHECKOUT_API_PLUGIN_VERSION,
           'lib_version'       => CheckoutApi_Client_Constant::VERSION,
           'integration_type'  => $integration_type,
           'time'              => date('Y-m-d H:i:s'),
           'instanceId'        => $order->order_id
      ),
      'cardToken'         => $cardToken
  );

  $config['authorization'] = $payment_method['settings']['private_key'];
  $config['mode']          = $payment_method['settings']['mode'];

  if (!empty($data['script']['products'])) {
    $config['postedParam']['products'] = $data['script']['products'];
  }  

  $result = $Api->createCharge($config);

  if ($Api->getExceptionState()->hasError()) {
    $message = t('An error has occured while processing your transaction. Please verify your information again or try a different card.');
  }  

  if ($result->isValid() && responseValidation($result)) {
    if(!empty($result->getRedirectUrl())) drupal_goto($result->getRedirectUrl());
    $output = uc_cart_complete_sale($order);
  } 
  else {
    switch((int)$result->getResponseCode()){
      case 20051 :
        $message = t('You have insufficient funds. Please try again with more funds or try a different card.');
        break;
      case 20054 : 
        $message = t('The card you used is expired. Please try again with a different card.');
        break;
      default :
        $message = t('An error has occured while processing your transaction. Please verify your information again or try a different card.');
    }
  }

  if(!empty($message)) uc_checkoutpayment_fail_order($message);

  return $output;
}

/**
 * Verify Response code
 */
function responseValidation($result) {
  $responseCode       = (int)$result->getResponseCode();
  if ($responseCode !== CHECKOUT_API_RESPONSE_CODE_APPROVED && $responseCode !== CHECKOUT_API_RESPONSE_CODE_APPROVED_RISK) {
      return false;
  }
  return true;
}

/**
 * Mobile Redirect to success url: example.com/uc_checkoutpayment/success.
 */
function uc_checkoutpayment_success_order() {

  if($_SESSION['cko_contextid'] != null){
    $order = uc_order_load($_SESSION['cko_contextid']);
  } else {
    drupal_goto();
  }

  $output = uc_cart_complete_sale($order);

  return $output;
  
}

/**
 * Redirect back to cart page with error message.
 */
function uc_checkoutpayment_fail_order($message = "An error has occured. Your order has been canceled."){
  if(!$_SESSION['cko_contextid']){
      drupal_goto();
  }
  else {
    $order = uc_order_load($_SESSION['cko_contextid']);
  }

  drupal_set_message(t($message), 'error');
  drupal_goto('cart/checkout/review');
}

/**
 * Reaction to the webhook
 */
function uc_checkoutpayment_process_order() { 
  $post_data = file_get_contents('php://input');
  if ($post_data) {

    module_load_include('php', 'uc_checkoutpayment', 'includes/autoload');

    $payment_method = uc_checkoutpayment_payment_method();
    
    // Check if the authentication is right.
    $headers = getallheaders();
    if($headers['Authorization'] != $payment_method['settings']['webhook_key'] && $payment_method['settings']['webhook_key'] != "") return http_response_code(400);

    // Process the data
    $jsondata = json_decode($post_data);
    $eventType = $jsondata->eventType;
    
    $cko_contextid = $jsondata->message->trackId;
    $order = uc_order_load($cko_contextid);

    $instance = uc_checkoutpayment_get_instance();
    $data     = $instance->getExtraInit($order, $payment_method);

    $api = CheckoutApi_Api::getApi(array('mode' => $payment_method['settings']['mode']));
    $object_charge = $api->chargeToObj($post_data);

    if ($object_charge->isValid()) {

      $order_total   = $data['script']['amount'] / 100;
      $order_balance = uc_payment_balance($order);

      switch($eventType){
        case EVENT_TYPE_CHARGE_SUCCEEDED :
          uc_order_update_status($order->order_id, 'cko_authorised');
          uc_order_comment_save($order->order_id, 0, t('Payment authorised.'), 'admin');

          add_transaction_to_db($object_charge->getId(), $order->order_id, 'succeeded');

          return http_response_code(200);
        
        case EVENT_TYPE_CHARGE_CAPTURED :
          $captured = $object_charge->getValue() / 100;

          if($captured == $order_balance){
            uc_order_update_status($order->order_id, 'payment_received');
            $comment = t('Payment recieved.');
          } elseif ($captured < $order_balance) {
            uc_order_update_status($order->order_id, 'cko_part_captured');
            $comment = t('Partial payment recieved @captured recieved instead of @order_total.', array('@captured' => uc_currency_format($captured), '@order_total' => uc_currency_format($order_total)));
          }

          add_transaction_to_db($object_charge->getId(), $order->order_id, 'captured');
          uc_order_comment_save($order->order_id, 0, t($comment), 'admin');
          uc_payment_enter($order->order_id, 'cko', $captured, 0, NULL, $comment);

          return http_response_code(200);
        
        case EVENT_TYPE_CHARGE_REFUNDED :
          $refunded = $object_charge->getValue() / 100;

          if($refunded + $order_balance == $order_total){
            uc_order_update_status($order->order_id, 'cko_refunded');
            $comment = t('Payment fully refunded.');
          } elseif ($refunded + $order_balance < $order_total) {
            uc_order_update_status($order->order_id, 'cko_part_refunded');
            $comment = t('Partial refunded made: @refunded of @order_total.', array('@refunded' => uc_currency_format($refunded), '@order_total' => uc_currency_format($order_total - $order_balance)));
          } 

          uc_order_comment_save($order->order_id, 0, t($comment), 'admin');
          uc_payment_enter($order->order_id, 'cko', -$refunded, 0, NULL, $comment);

          return http_response_code(200);

        case EVENT_TYPE_CHARGE_VOIDED :
          uc_order_update_status($order->order_id, 'canceled');
          uc_order_comment_save($order->order_id, 0, t('Payment voided.'), 'admin');
          return http_response_code(200);

        case EVENT_TYPE_INVOICE_CANCELLED :
          uc_order_update_status($order->order_id, 'canceled');
          uc_order_comment_save($order->order_id, 0, t('Payment cancelled.'), 'admin');
          return http_response_code(200);

        default :
          return http_response_code(400);
      }
    }
  }
  
  return NULL;
}

function add_transaction_to_db($charge_id, $order_id, $transaction_type){
  db_insert('uc_checkoutpayment_charge_details')
  ->fields(array(
    'charge_id'   => $charge_id,
    'order_id'    => $order_id,
    'transaction_type' => $transaction_type,
  ))
  ->execute();
}

/**
 * Implements hook_uc_payment_entered($order, $method, $amount, $account, $data, $comment)
 */
function uc_checkoutpayment_uc_payment_entered($order, $method, $amount, $account, $data, $comment){
  $payment_method = uc_checkoutpayment_payment_method();
  $instance = uc_checkoutpayment_get_instance();  

  $payments = uc_payment_load_payments($order->order_id);
  $payed_amount = ($order->order_total - uc_payment_balance($order));
  
  if($method == "cko" && $account->uid != "0" && $comment != "Automated balance restore") {
    if($amount > 0 && !is_captured($order->order_id)){
      uc_payment_enter($order->order_id, 'cko', -$amount, 0, NULL, t("Automated balance restore"));
      $data = $instance->captureCharge($order, $payment_method, ($amount * 100));
    }
    elseif ($amount > 0) {
      uc_payment_delete(end($payments)->receipt_id);     
      drupal_set_message(t("You cannot capture more than once."), 'error');
    }
    elseif (is_captured($order->order_id) && -$amount <= $payed_amount){
      uc_payment_enter($order->order_id, 'cko', -$amount, 0, NULL, t("Automated balance restore"));
      $data = $instance->refundCharge($order, $payment_method, ($amount * -100));
    }
    elseif(-$amount <= $payed_amount) {
      uc_payment_delete(end($payments)->receipt_id);
      drupal_set_message(t("You cannot refund before you captured the payment"), 'error');
    }
    else{
      uc_payment_delete(end($payments)->receipt_id);
      drupal_set_message(t("You cannot refund more than you've recieved"), 'error');
    }
  }
}

function is_captured($order_id){
  $result = array();
  $result = db_select('uc_checkoutpayment_charge_details', 'c')
    ->fields('c')
    ->condition('order_id', $order_id,'=')
    ->condition('transaction_type', "captured",'=')
    ->execute()
    ->fetchAll();

  if(sizeof($result) == 0) return false;
  
  return true;
}

function is_flagged($order_id){
  $result = array();
  $result = db_select('uc_checkoutpayment_charge_details', 'c')
    ->fields('c')
    ->condition('order_id', $order_id,'=')
    ->condition('transaction_type', "captured",'=')
    ->execute()
    ->fetchAll();

  if(sizeof($result) == 0) return false;
  
  return true;
}

/**
 * Own methods to reduce wrong entries
 * Should be turned into object
 */
function uc_checkoutpayment_payment_method(){
  $payment_method = array();

  if(variable_get('autocaptime') == '') variable_set('autocaptime', 0);
  if(variable_get('cko_integration') != 'hosted') variable_set('paymentMode', 'cards');

  $payment_method['settings'] = array(
    'private_key'     => variable_get('private_key', ''),
    'public_key'      => variable_get('public_key', ''),
    'webhook_key'     => variable_get('webhook_key', ''),
    'mode'            => variable_get('mode', 'live'),
    'payment_action'  => variable_get('payment_action', ''),
    'autocaptime'     => variable_get('autocaptime', 0),
    'paymentMode'     => variable_get('paymentMode', 'mixed'),
    'type'            => variable_get('type', 'pci'),
    'is3D'            => variable_get('is3D', false),
    'timeout'         => variable_get('timeout', 60),
    'logourl'         => variable_get('logourl', ''),
    'themecolor'      => variable_get('themecolor', ''),
    'title'           => variable_get('title', variable_get('site_name', "Default site name")),
    'subtitle'        => variable_get('subtitle', ''),
    'button_label'    => variable_get('button_label', ''),
    'currencycode'    => variable_get('currencycode', 'false'),
    'cko_language'    => variable_get('cko_language', ''),
    'cko_integration' => variable_get('cko_integration', 'hosted'),
    'cko_render_mode' => variable_get('cko_render_mode', 0 ),
  );

  return $payment_method;
}