<?php

/**
 * Checkout.com integration module.
 *
 * @file
 *
 * This module provides Checkout.com payment gateway integration to Ubercart,
 * Ubercart Checkoutpayment offers a PCI-compliant way to process payments.
 */

const CHECKOUT_API_RESPONSE_CODE_APPROVED      = 10000;
const CHECKOUT_API_RESPONSE_CODE_APPROVED_RISK = 10100;
const CHECKOUT_API_PLUGIN_VERSION              = '7.x-2.9';
const HOSTED_URL_SANDOX                        = 'https://secure.checkout.com/sandbox/payment/';
const HOSTED_URL_LIVE                          = 'https://secure.checkout.com/payment/';
const REDIRECT_URL                             = '?q=/uc_checkoutpayment/process_charge';
const CANCEL_URL                               = '?q=/uc_checkoutpayment/fail';
const EVENT_TYPE_CHARGE_SUCCEEDED              = 'charge.succeeded';
const EVENT_TYPE_CHARGE_CAPTURED               = 'charge.captured';
const EVENT_TYPE_CHARGE_REFUNDED               = 'charge.refunded';
const EVENT_TYPE_CHARGE_VOIDED                 = 'charge.voided';
const EVENT_TYPE_INVOICE_CANCELLED             = 'invoice.cancelled';

/**
 * Implements hook_init().
 *
 * @var array $conf
 */
function uc_checkoutpayment_init() {
  global $conf;
  $conf['i18n_variables'][] = 'uc_checkoutpayment_method_title';
  $conf['i18n_variables'][] = 'uc_checkoutpayment_checkout_button';
}

/**
 * Implements hook_variable_info().
 */
function uc_checkoutpayment_variable_info() {
  $variable['uc_checkoutpayment_method_title'] = array(
    'title' => t('Checkout.com - method title'),
    'description' => t('Name for Checkout.com payment method presented to the customer.'),
  );
  $variable['uc_checkoutpayment_checkout_button'] = array(
    'title' => t('Checkout.com - checkout button'),
    'description' => t('Text on checkout button when paying via Checkout.com.'),
  );

  return $variable;
}

/**
 * Implements hook_menu().
 */
function uc_checkoutpayment_menu() {
  $items = array();
  $items['checkoutapi/process'] = array(
    'title' => 'Ipn checkout',
    'page callback' => 'uc_checkoutpayment_process_order',
    /* Access neccecary for webhooks */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['uc_checkoutpayment/admin'] = array(
    'title' => 'Admin ajex call',
    'page callback' => 'uc_checkoutpayment_admin_call',
    /* Access neccecary for AJAX request */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['uc_checkoutpayment/success'] = array(
    'title' => 'Success page',
    'page callback' => 'uc_checkoutpayment_success_order',
    /* Redirect costumers to this address when the charge request has been succesfull */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['uc_checkoutpayment/process_charge'] = array(
    'title' => 'Create Order page',
    'page callback' => 'uc_checkoutpayment_process_charge',
    /* Redirect costumers to this address when processing the card entry */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['uc_checkoutpayment/fail'] = array(
    'title' => 'Fail Order page',
    'page callback' => 'uc_checkoutpayment_fail_order',
    /* Redirect costumers to this address when the charge request has failed */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_checkoutpayment_uc_payment_method() {
  $methods[] = array(
    'id' => 'cko',
    'name' => t('Checkout.com'),
    'title' => variable_get('uc_checkoutpayment_method_title',
    t('Credit / Debit cards (Checkout.com)')),
    'desc' => t('Redirect to Checkout.com to pay.'),
    'callback' => 'uc_payment_method_checkoutpayment',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implements hook_payment_method_callback().
 */
function uc_payment_method_checkoutpayment($op, &$order) {
  module_load_include('module', 'uc_credit', 'uc_credit');

  switch ($op) {
    case 'settings':
      global $base_url;
      $form['checkoutpayment_help_text'] = array(
        '#markup' => '<div class="help">' . t('<h4><strong>Checkout.com Payment Settings</strong></h4><p>Go to https://sandbox.checkout.com to properly install this module.</p>', array('%base_url' => $base_url)) . '</div>',
      );

      $settings = cko_store_settings()['settings'];

      $form['checkoutpayment_account'] = array(
        '#type' => 'fieldset',
        '#title' => t('Account settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['checkoutpayment_account']['cko_private_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Secret Key'),
        '#required' => TRUE,
        '#description' => t('The Checkout.com account secret api key to use .'),
        '#default_value' => $settings['private_key'],
      );

      $form['checkoutpayment_account']['cko_public_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Public Key'),
        '#required' => TRUE,
        '#description' => t('The Checkout.com account publishable api key to use.'),
        '#default_value' => $settings['public_key'],
      );

      $form['checkoutpayment_account']['cko_webhook_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Webhook shared private key'),
        '#description' => t('The private shared key to check that the message comes from Checkout.'),
        '#default_value' => $settings['webhook_key'],
      );

      $form['checkoutpayment_account']['cko_mode'] = array(
        '#type' => 'select',
        '#title' => t('Endpoint Url Mode'),
        '#description' => t('Perform transactions on the production server or on the testing server.'),
        '#default_value' => $settings['mode'],
        '#options' => array(
          'live' => t('Live'),
          'sandbox' => t('Sandbox'),
        ),
      );

      $form['checkoutpayment_account']['cko_debugMode'] = array(
        '#type' => 'select',
        '#title' => t('Enable debug mode'),
        '#description' => t('See all error messages from the hub'),
        '#options' => array(
          FALSE => t('Off'),
          TRUE  => t('On'),
        ),
        '#default_value' => $settings['debugMode'],
      );

      $form['checkoutpayment_transaction'] = array(
        '#type' => 'fieldset',
        '#title' => t('Payment settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['checkoutpayment_transaction']['cko_payment_action'] = array(
        '#type' => 'select',
        '#title' => t('Transaction Method'),
        '#description' => t('The processing method to use for each transaction.'),
        '#default_value' => $settings['payment_action'],
        '#options' => array(
          UC_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
          UC_CREDIT_AUTH_ONLY => t('Authorization only (requires manual capture after checkout)'),
        ),
      );

      $form['checkoutpayment_transaction']['cko_autocaptime'] = array(
        '#type' => 'textfield',
        '#title' => t('Set Gateway auto capture time.'),
        '#description' => t('Set how long will the payment be capture.'),
        '#default_value' => $settings['autocaptime'],
      );

      $form['checkoutpayment_transaction']['cko_paymentMode'] = array(
        '#type' => 'select',
        '#title' => t('Payment Mode'),
        '#options' => array(
          'cards' => t('Card'),
          'localpayments' => t('Local Payment'),
          'mixed' => t('Mixed'),
        ),
        '#default_value' => $settings['paymentMode'],
      );

      $form['checkoutpayment_transaction']['cko_is3D'] = array(
        '#type' => 'select',
        '#title' => t('Enable 3D'),
        '#description' => t('If you want to process all transactions as 3D secure, select Yes'),
        '#options' => array(
          '1' => t('No'),
          '2' => t('Yes'),
        ),
        '#default_value' => $settings['is3D'],
      );

      $form['checkoutpayment_transaction']['cko_timeout'] = array(
        '#type' => 'textfield',
        '#title' => t('Set Gateway timeout.'),
        '#description' => t('Set how long request timeout on server.'),
        '#default_value' => $settings['timeout'],
      );

      $form['checkoutpayment_ui'] = array(
        '#type' => 'fieldset',
        '#title' => t('Personalisation'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['checkoutpayment_ui']['cko_integration'] = array(
        '#type' => 'select',
        '#title' => t('Integration method'),
        '#description' => t('Change the language of the checkout hosted page'),
        '#options' => array(
          'hosted' => t('Hosted'),
          'lightbox' => t('Overlay (Only cards)'),
          'embedded' => t('Embedded (Only cards)'),
        ),
        '#default_value' => $settings['cko_integration'],
      );

      $form['checkoutpayment_ui']['cko_render_mode'] = array(
        '#type' => 'select',
        '#title' => t('Lightbox Render Mode'),
        '#description' => t('Choose how the Lightbox will be rendered on the review page.'),
        '#options' => array(
          0 => t('Icons and Pay Button'),
          1 => t('Pay Button only'),
          3 => t('Active Icons only'),
        ),
        '#default_value' => $settings['cko_render_mode'],
      );

      $form['checkoutpayment_ui']['cko_logourl'] = array(
        '#type' => 'textfield',
        '#title' => t('Logo URL'),
        '#description' => t('This is the setting to display the logo on checkout.js (Max size: 180 x 36)'),
        '#default_value' => $settings['logourl'],
      );

      $form['checkoutpayment_ui']['cko_themecolor'] = array(
        '#type' => 'textfield',
        '#title' => t('Theme color'),
        '#description' => t('Set theme color for checkout hosted'),
        '#default_value' => $settings['themecolor'],
      );

      $form['checkoutpayment_ui']['cko_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#description' => t('Add a title on the hosted payment page'),
        '#default_value' => $settings['title'],
      );

      $form['checkoutpayment_ui']['cko_subtitle'] = array(
        '#type' => 'textfield',
        '#title' => t('Subtitle'),
        '#description' => t('Add a subtitle on the hosted payment page'),
        '#default_value' => $settings['subtitle'],
      );

      $form['checkoutpayment_ui']['cko_button_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Button label'),
        '#description' => t('Change the button label on the hosted payment page'),
        '#default_value' => $settings['button_label'],
      );

      $form['checkoutpayment_ui']['cko_language'] = array(
        '#type' => 'select',
        '#title' => t('Language'),
        '#description' => t('Change the language of the checkout hosted page'),
        '#options' => array(
          'DE-DE' => t('German'),
          'NL-NL' => t('Dutch'),
          'FR-FR' => t('French'),
          'KR-KR' => t('Korean'),
          'IT-IT' => t('Italian'),
          'EN-GB' => t('English'),
        ),
        '#default_value' => $settings['cko_language'],
      );

      $form['checkoutpayment_ui']['cko_currencycode'] = array(
        '#type'        => 'select',
        '#title'       => t('Widget currency format'),
        '#description' => t('Display currency code or currency symbol on the checkout hosted'),
        '#options'     => array(
          'true'  => t('Code'),
          'false' => t('Symbol'),
        ),
        '#default_value' => $settings['currencycode'],
      );

      return $form;

    case 'order-view':
      return drupal_get_form('admin_order_payment_action_form', $order);

    default:
      return NULL;
  }
}

/**
 * Implements hook_form().
 */
function admin_order_payment_action_form($form, &$form_state, $order) {
  global $base_url;

  $form['order_id'] = array(
    '#type'       => 'hidden',
    '#value'      => $order->order_id,
    '#attributes' => array(
      'id' => 'order_id',
    ),
  );

  if (is_flagged($order->order_id)) {
    $form['flagged'] = array(
      '#markup' => '<div class="warning messages">' . t('Flagged.') . '</div>',
    );
  }

  if (!is_captured($order->order_id)) {
    $form['capture'] = array(
      '#type'  => 'submit',
      '#value' => t('Full Capture'),
      '#name'  => 'capture',
    );

    $form['cko-action'] = array(
      '#type'       => 'hidden',
      '#value'      => 'capture',
      '#attributes' => array(
        'id' => 'cko-action',
      ),
    );
  }
  elseif (!is_refunded($order->order_id)) {
    $form['refund'] = array(
      '#type'  => 'submit',
      '#value' => t('Full Refund'),
      '#name'  => 'refund',
    );

    $form['cko-action'] = array(
      '#type'       => 'hidden',
      '#value'      => 'refund',
      '#attributes' => array(
        'id' => 'cko-action',
      ),
    );
  }
  else {
    $form['message'] = array(
      '#markup' => t('Payment has been fully refunded.'),
    );

    $form['cko-action'] = array(
      '#type'       => 'hidden',
      '#value'      => 'none',
      '#attributes' => array(
        'id' => 'cko-action',
      ),
    );
  }

  $path = $base_url;
  $path = drupal_get_path('module', 'uc_checkoutpayment');
  drupal_add_js(
    $path . "/includes/admin_refresh.js",
    array(
      'type' => 'file',
      'scope' => 'footer',
    )
  );
  return $form;
}

/**
 * Implements hook_form_sumbit().
 */
function admin_order_payment_action_form_submit($form, &$form_state) {
  $order_id = $form_state['values']['order_id'];
  $values   = $form_state['input'];

  $payment_method = cko_store_settings();
  $instance       = uc_checkoutpayment_get_instance();
  $order          = uc_order_load($order_id);

  if (!is_captured($order_id) && isset($values['capture'])) {
    $instance->captureCharge($order, $payment_method, ($order->order_total * 100));
    drupal_set_message(t("The payment was captured."), 'status');
  }
  elseif (is_captured($order_id) && isset($values['refund'])) {
    $amount = $order->order_total - uc_payment_balance($order);
    $instance->refundCharge($order, $payment_method, ($amount * 100));
    drupal_set_message(t("The payment was refunded."), 'status');
  }
}

/**
 * Implements hook_form_alter() for uc_cart_checkout_review_form().
 */
function uc_checkoutpayment_form_uc_cart_checkout_review_form_alter(&$form, &$form_state) {
  if (($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);
    $_SESSION['cko_contextid'] = $order_id;

    if ($order->payment_method == 'cko') {
      $cko_integration = cko_store_settings()['settings']['cko_integration'];

      switch ($cko_integration) {
        case 'hosted':
          unset($form['actions']['submit']);
          $form['#prefix'] = '<table style="display: inline;">
            <tr class="review-button-row-inner"><td>';
          $preparedForm = drupal_get_form('uc_checkoutpayment_form', $order);
          $form['#suffix'] = '</td><td>' . drupal_render($preparedForm) . '</td></tr></table>';
          break;

        case 'embedded':
          $form['actions']['submit']['#disabled'] = TRUE;
          $form['actions']['submit']['#attributes']['class'][] = 'cko-disabled';
          $form['#prefix'] = '<table style="display: inline;">
            <tr><td colspan="2"> ' . checkout_payment_widget($order) . ' </td></tr>
            <tr class="review-button-row-inner"><td>';
          $form['#suffix'] = '</td></tr>

          <script>
              var submitButton = document.getElementById("edit-submit");
              submitButton.addEventListener("click", function () {
                  if (Checkout.isCardFormValid()) Checkout.submitCardForm();
              });
          </script>
          </table>';
          break;

        default:
          unset($form['actions']['submit']);
          $form['#prefix'] = '<table style="display: inline;">
            <tr><td colspan="2"> ' . checkout_payment_widget($order) . ' </td></tr>
            <tr class="review-button-row-inner"><td>';
          $form['#suffix'] = '</td></tr></table>';
          break;
      }
    }
  }
}

/**
 * Hidden from elements on the review page to POST to CKO hosted page.
 *
 * @param array $form
 *   Drupal form.
 * @param array $form_state
 *   Drupal form state.
 * @param object $order
 *   Ubercart order.
 *
 * @return array
 *   The drupal form array.
 */
function uc_checkoutpayment_form(array $form, array &$form_state, $order) {
  global $base_url;

  $payment_method = cko_store_settings();
  $settings       = $payment_method['settings'];

  $instance = uc_checkoutpayment_get_instance();
  $data     = $instance->getExtraInit($order, $payment_method);

  // Settings.
  $hppUrl       = $settings['mode'] == 'sandbox' ? HOSTED_URL_SANDOX : HOSTED_URL_LIVE;
  $publicKey    = $settings['public_key'];
  $paymentMode  = $settings['paymentMode'];
  $themeColor   = $settings['themecolor'];
  $title        = $settings['title'];
  $logoUrl      = $settings['logourl'];
  $currencycode = $settings['currencycode'];
  $subtitle     = $settings['subtitle'];
  $buttonLabel  = $settings['button_label'];
  $cko_language = $settings['cko_language'];

  $cardFormMode = "cardTokenisation";
  $redirectUrl  = $base_url . REDIRECT_URL;
  $cancelUrl    = $base_url . CANCEL_URL;

  // Order details.
  $contextId     = $order->order_id;
  $paymentToken  = $data['script']['paymentToken'];
  $customerEmail = $data['script']['email'];
  $value         = $data['script']['amount'];
  $currency      = $data['script']['currency'];

  $billingDetails = '{
    "addressLine1":"' . $order->billing_street1 . '",
    "addressLine2":"' . $order->billing_street2 . '",
    "postcode":"    ' . $order->billing_postal_code . '",
    "country":"     ' . uc_get_country_data(array('country_id' => $order->billing_country))[0]['country_iso_code_2'] . '",
    "city":"        ' . $order->billing_city . '",
    "state":"       ' . $order->billing_zone . '"
  }';

  // Format data for form.
  $data = array(
    'publicKey'       => $publicKey,
    'paymentToken'    => $paymentToken,
    'customerEmail'   => $customerEmail,
    'value'           => $value,
    'currency'        => $currency,
    'cardFormMode'    => $cardFormMode,
    'paymentMode'     => $paymentMode,
    'redirectUrl'     => $redirectUrl,
    'cancelUrl'       => $cancelUrl,
    'contextId'       => $contextId,
    'themeColor'      => $themeColor,
    'title'           => $title,
    'logoUrl'         => $logoUrl,
    'billingDetails'  => $billingDetails,
    'localisation'    => $cko_language,
    'subtitle'        => $subtitle,
    'buttonLabel'     => $buttonLabel,
    'useCurrencyCode' => $currencycode,
  );

  add_log(
    "Payment form data is collected.", 
    array('data' => $data)
  );

  // Set form objects.
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array(
        '#type' => 'hidden',
        '#value' => t($value),
        '#attributes' => array(
          'name' => array($name),
        ),
      );
    }
  }

  // Set submit button.
  $form['#action'] = url($hppUrl);
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t(variable_get('uc_checkoutpayment_checkout_button', 'Proceed with payment')),
  );

  return $form;
}

/**
 * Createn of JS widget for the form.
 *
 * @param object $order
 *   A Ubercart order object.
 *
 * @return string
 *   returns the html form element.
 */
function checkout_payment_widget($order) {
  global $base_url;

  $payment_method = cko_store_settings();
  $settings       = $payment_method['settings'];

  $instance = uc_checkoutpayment_get_instance();
  $data     = $instance->getExtraInit($order, $payment_method);

  // Settings.
  $publicKey       = $settings['public_key'];
  $themeColor      = $settings['themecolor'];
  $title           = $settings['title'];
  $logoUrl         = $settings['logourl'];
  $currencycode    = $settings['currencycode'];
  $subtitle        = $settings['subtitle'];
  $buttonLabel     = $settings['button_label'];
  $cko_language    = $settings['cko_language'];
  $cko_render_mode = $settings['cko_render_mode'];
  $appmode         = 'lightbox';
  $redirectUrl     = $base_url . REDIRECT_URL;

  // Order details.
  $customerEmail = $data['script']['email'];
  $value         = $data['script']['amount'];
  $currency      = $data['script']['currency'];

  if ($settings['cko_integration'] == 'embedded') {
    $title = $subtitle = $logoUrl = '';
    $appmode = 'embedded';
  }

  add_log(
    "Widget data is collected.", 
    array('settings' => $settings, 'data' => $data)
  );

  return "
    <form class=\"payment-form\" method=\"POST\" action=\"" . $redirectUrl . "\">
      <script>
        window.CKOConfig = {
          publicKey: '" . $publicKey . "',
          customerEmail: '" . $customerEmail . "',
          value: " . $value . ",
          currency: '" . $currency . "',
          formButtonLabel: '" . $buttonLabel . "',
          themeColor: '" . $themeColor . "',
          title: '" . t($title) . "',
          subtitle: '" . t($subtitle) . "',
          logoUrl: '" . $logoUrl . "',
          localisation: '" . $cko_language . "',
          useCurrencyCode: '" . $currencycode . "',
          appMode: '" . $appmode . "',
          renderMode: '" . $cko_render_mode . "',
          cardFormValidationChanged: function (event) {
            submitButton.disabled = !Checkout.isCardFormValid()
            if(Checkout.isCardFormValid()) submitButton.classList.remove('cko-disabled');
            else submitButton.classList.add('cko-disabled');
          }
        };
      </script>
      <script async src=\"https://cdn.checkout.com/v2/sandbox/js/checkout.js\"></script>
    </form>
  ";
}

/**
 * Retrieves new instance of the creditcard class.
 *
 * @return object
 *   creditcard
 */
function uc_checkoutpayment_get_instance() {
  module_load_include('php', 'uc_checkoutpayment', 'includes/autoload');
  return CheckoutapiLibFactory::getInstance('MethodsCreditcard');
}

/**
 * Processes card payment after validation by CKO.
 *
 * @return array
 *   redirect to succes, fail, or 3D Secure page.
 */
function uc_checkoutpayment_process_charge() {
  add_log(
    "Process charge page was opened.", 
    array(
      'request' => $_REQUEST, 
      'session' => $_SESSION,
    )
  );

  if (!$_REQUEST['cko-card-token'] || $_SESSION['cko_contextid'] == NULL) {
    drupal_goto();
  }

  $cardToken = $_REQUEST['cko-card-token'];
  $order = uc_order_load($_SESSION['cko_contextid']);

  $payment_method = cko_store_settings();

  $instance = uc_checkoutpayment_get_instance();
  $data     = $instance->getExtraInit($order, $payment_method);

  $api = CheckoutapiApi::getapi(array('mode' => $payment_method['settings']['mode']));

  $autoCapture      = $payment_method['settings']['payment_action'] == 'authorize' ? CheckoutapiClientConstant::AUTOCAPUTURE_AUTH : CheckoutapiClientConstant::AUTOCAPUTURE_CAPTURE;
  $autoCapTime      = $payment_method['settings']['autocaptime'];
  $chargeMode       = $payment_method['settings']['is3D'];
  $integration_type = $payment_method['settings']['cko_integration'];

  $order_total      = $data['script']['amount'];
  $currency         = $data['script']['currency'];
  $billing_address  = $data['script']['billingDetails'];
  $shipping_address = $data['script']['shippingDetails'];
  $customerName     = $data['script']['name'];
  $email            = $data['script']['email'];

  if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
    $ip = $_SERVER['HTTP_CLIENT_IP'];
  }
  elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
    $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
  }
  else {
    $ip = ip_address();
  }

  $config = array();
  $config['postedParam'] = array(
    'trackId'           => $order->order_id,
    'value'             => $order_total,
    'currency'          => $currency,
    'autoCapture'       => $autoCapture,
    'chargeMode'        => $chargeMode,
    'customerIp'        => $ip,
    'autoCapTime'       => $autoCapTime,
    'email'             => $email,
    'customerName'      => $customerName,
    'billingDetails'    => $billing_address,
    'shippingDetails'   => $shipping_address,
    'metadata'          => array(
      'server'            => $_SERVER['HTTP_USER_AGENT'],
      'plugin_version'    => CHECKOUT_API_PLUGIN_VERSION,
      'lib_version'       => CheckoutapiClientConstant::VERSION,
      'integration_type'  => $integration_type,
      'time'              => date('Y-m-d H:i:s'),
      'instanceId'        => $order->order_id,
    ),
    'cardToken'         => $cardToken,
  );

  $config['authorization'] = $payment_method['settings']['private_key'];
  $config['mode']          = $payment_method['settings']['mode'];

  if (!empty($data['script']['products'])) {
    $config['postedParam']['products'] = $data['script']['products'];
  }

  add_log(
    "Data to create a charge was collected.", 
    array('config' => $config,)
  );

  $result = $api->createCharge($config);

  if ($api->getExceptionstate()->hasError()) {
    $message = t('An error has occurred while processing a transaction. The api returned an error.');
    watchdog('uc_checkoutpayment', $message, $api, WATCHDOG_ERROR, NULL);
    uc_checkoutpayment_fail_order();
  }

  if ($result->isValid() && response_validation($result)) {
    if (!empty($result->getRedirectUrl())) {
      add_log(
        "3D Secure redirect was followed.", 
        array('result' => $result)
      );
      drupal_goto($result->getRedirectUrl());
    }
    add_log(
      "Charge was succesfully created.", 
      array('result' => $result)
    );
    return uc_checkoutpayment_success_order();
  }


  add_log(
    'Response code: @responsecode | Message: @message',
    array(
      '@responsecode' => (int) $result->getResponseCode(),
      '@message' => $result->getResponseMessage(),
    )
  );

  uc_checkoutpayment_fail_order();
}

/**
 * Verifies the response code from CKO.
 *
 * @param object $result
 *   Result object from the CKO response.
 *
 * @return bool
 *   returns TRUE if valid and FALSE if not valid.
 */
function response_validation($result) {
  $responseCode = (int) $result->getResponseCode();
  if ($responseCode !== CHECKOUT_API_RESPONSE_CODE_APPROVED && $responseCode !== CHECKOUT_API_RESPONSE_CODE_APPROVED_RISK) {
    add_log(
      "Response was not valid.", 
      array('responseCode' => $responseCode,)
    );
    return FALSE;
  }
  return TRUE;
}

/**
 * Redirect to success url: example.com/uc_checkoutpayment/success.
 */
function uc_checkoutpayment_success_order() {
  add_log(
    "Success page was opened.", 
    array('session' => $_SESSION)
  );

  if ($_SESSION['cko_contextid'] != NULL) {
    $order = uc_order_load($_SESSION['cko_contextid']);
  }
  else {
    add_log(
      "Context ID was null", 
      array('session' => $_SESSION)
    );
    drupal_goto();
  }

  $output = uc_cart_complete_sale($order);

  return $output;
}

/**
 * Redirect back to cart page with error message.
 */
function uc_checkoutpayment_fail_order() {
  if (!$_SESSION['cko_contextid']) {
    drupal_goto();
  }

  drupal_set_message(t("An error has occurred while processing your transaction. Please verify your information again or try a different card."), 'error');
  drupal_goto('cart/checkout/review');
}

/**
 * Webhook listener for CKO server.
 *
 * @return httpresponse
 *   Response to the CKO server.
 */
function uc_checkoutpayment_process_order() {
  $post_data = file_get_contents('php://input');

  add_log(
    "The webhook listener was opened.",
    array('post_data' => $post_data,)
  );

  if ($post_data) {

    $payment_method = cko_store_settings();

    // Check if the authentication is right.
    $headers = getallheaders();
    if ($headers['Authorization'] != $payment_method['settings']['webhook_key'] && $payment_method['settings']['webhook_key'] != "") {
      return http_response_code(400);
    }

    // Process the data.
    $jsondata = json_decode($post_data);
    $eventType = $jsondata->eventType;

    $cko_contextid = $jsondata->message->trackId;
    $order = uc_order_load($cko_contextid);

    $instance = uc_checkoutpayment_get_instance();
    $data     = $instance->getExtraInit($order, $payment_method);

    $api = CheckoutapiApi::getapi(array('mode' => $payment_method['settings']['mode']));
    $object_charge = $api->chargeToObj($post_data);

    add_log(
      "The webhook information.",
      array(
        'headers' => $headers,
        'payment_method' => $payment_method,
        'object_charge' => $object_charge,
        'api' => $api,
        'data' => $data,
      )
    );

    if ($object_charge->isValid()) {

      $order_total   = $data['script']['amount'] / 100;
      $order_balance = uc_payment_balance($order);

      switch ($eventType) {
        case EVENT_TYPE_CHARGE_SUCCEEDED:
          uc_order_update_status($order->order_id, 'cko_authorised');

          if ($object_charge->getResponseCode() == 10100) {
            uc_order_comment_save($order->order_id, 0, t('Payment authorised and flagged.'), 'admin');
            add_transaction_to_db($object_charge->getId(), $order->order_id, 'succeeded', TRUE);
          }
          else {
            uc_order_comment_save($order->order_id, 0, t('Payment authorised.'), 'admin');
            add_transaction_to_db($object_charge->getId(), $order->order_id, 'succeeded');
          }

          return http_response_code(200);

        case EVENT_TYPE_CHARGE_CAPTURED:
          $captured = $object_charge->getValue() / 100;

          if ($captured == $order_balance) {
            uc_order_update_status($order->order_id, 'payment_received');
            $comment = t('Payment received.');
          }
          elseif ($captured < $order_balance) {
            uc_order_update_status($order->order_id, 'cko_part_captured');
            $comment = t('Partial payment received @captured received instead of @order_total.', array('@captured' => uc_currency_format($captured), '@order_total' => uc_currency_format($order_total)));
          }

          add_transaction_to_db($object_charge->getId(), $order->order_id, 'captured');
          uc_order_comment_save($order->order_id, 0, $comment, 'admin');
          uc_payment_enter($order->order_id, 'cko', $captured, 0, NULL, $comment);

          return http_response_code(200);

        case EVENT_TYPE_CHARGE_REFUNDED:
          $refunded = $object_charge->getValue() / 100;

          if ($refunded + $order_balance == $order_total) {
            uc_order_update_status($order->order_id, 'cko_refunded');
            $comment = t('Payment fully refunded.');
          }
          elseif ($refunded + $order_balance < $order_total) {
            uc_order_update_status($order->order_id, 'cko_part_refunded');
            $comment = t('Partial refunded made: @refunded of @order_total.', array('@refunded' => uc_currency_format($refunded), '@order_total' => uc_currency_format($order_total - $order_balance)));
          }

          uc_order_comment_save($order->order_id, 0, $comment, 'admin');
          uc_payment_enter($order->order_id, 'cko', -$refunded, 0, NULL, $comment);

          return http_response_code(200);

        case EVENT_TYPE_CHARGE_VOIDED:
          uc_order_update_status($order->order_id, 'canceled');
          uc_order_comment_save($order->order_id, 0, t('Payment voided.'), 'admin');
          return http_response_code(200);

        case EVENT_TYPE_INVOICE_CANCELLED:
          uc_order_update_status($order->order_id, 'canceled');
          uc_order_comment_save($order->order_id, 0, t('Payment cancelled.'), 'admin');
          return http_response_code(200);

        default:
          return http_response_code(400);
      }
    }
  }

  return NULL;
}

/**
 * Adds an response related to an order to the database.
 *
 * @param string $charge_id
 *   The id of the charge.
 * @param int $order_id
 *   The id of the order.
 * @param string $transaction_type
 *   Options: 'captured', 'refunded', or 'succeeded'.
 * @param bool $is_flagged
 *   TRUE if the charge has been flagged.
 */
function add_transaction_to_db($charge_id, $order_id, $transaction_type, $is_flagged = FALSE) {
  db_insert('uc_checkoutpayment_charge_details')
    ->fields(array(
      'charge_id'        => $charge_id,
      'order_id'         => $order_id,
      'transaction_type' => $transaction_type,
    ))
    ->execute();

  if ($transaction_type == 'succeeded') {
    db_insert('uc_checkoutpayment_flagged_orders')
      ->fields(array(
        'order_id'   => $order_id,
        'is_flagged' => ($is_flagged ? 1 : 0),
      ))
      ->execute();
  }

  add_log(
    "Transaction added to database",
    array(
      'charge_id' => $charge_id,
      'order_id' => $order_id,
      'transaction_type' => $transaction_type,
      'is_flagged' => $is_flagged,
    )
  );

}

/**
 * Implements hook_uc_payment_entered().
 */
function uc_checkoutpayment_uc_payment_entered($order, $method, $amount, $account, $data, $comment) {
  $payment_method = cko_store_settings();
  $instance = uc_checkoutpayment_get_instance();

  $payments = uc_payment_load_payments($order->order_id);
  $payed_amount = ($order->order_total - (uc_payment_balance($order) + $amount));

  add_log(
    "An payment was added for an order.",
    array(
      'order' => $order,
      'method' => $method,
      'amount' => $amount,
      'account' => $account,
      'data' => $data,
      'comment' => $comment,
    )
  );

  if ($method == "cko" && $account->uid != "0" && $comment != "Automated balance restore") {
    if ($amount > 0 && !is_captured($order->order_id)) {
      uc_payment_enter($order->order_id, 'cko', -$amount, 0, NULL, t("Automated balance restore"));
      $instance->captureCharge($order, $payment_method, ($amount * 100));
    }
    elseif ($amount > 0) {
      uc_payment_delete(end($payments)->receipt_id);
      drupal_set_message(t("You cannot capture more than once."), 'error');
    }
    elseif (is_captured($order->order_id) && -$amount <= $payed_amount) {
      uc_payment_enter($order->order_id, 'cko', -$amount, 0, NULL, t("Automated balance restore"));
      $instance->refundCharge($order, $payment_method, ($amount * -100));
    }
    elseif (-$amount <= $payed_amount) {
      uc_payment_delete(end($payments)->receipt_id);
      drupal_set_message(t("You cannot refund before you captured the payment"), 'error');
    }
    else {
      uc_payment_delete(end($payments)->receipt_id);
      drupal_set_message(t("You cannot refund more than you've received"), 'error');
    }
  }
}

/**
 * Checks if an order is captured through CKO.
 *
 * @param int $order_id
 *   The id of the order being checked.
 *
 * @return bool
 *   Returns TRUE if captured and FALSE if not captured.
 */
function is_captured($order_id) {
  $result = array();
  $result = db_select('uc_checkoutpayment_charge_details', 'c')
    ->fields('c')
    ->condition('order_id', $order_id, '=')
    ->condition('transaction_type', "captured", '=')
    ->execute()
    ->fetchAll();

  if (count($result) == 0) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Checks if an order is fully refunded through CKO.
 *
 * @param int $order_id
 *   The id of the order being checked.
 *
 * @return bool
 *   Returns TRUE if fully refunded and FALSE if not fully refunded.
 */
function is_refunded($order_id) {
  $order = uc_order_load($order_id);
  if ($order->order_status == 'cko_refunded') {
    return TRUE;
  }

  return FALSE;
}

/**
 * Checks if an order is flagged by CKO.
 *
 * @param int $order_id
 *   The id of the order being checked.
 *
 * @return bool
 *   Returns TRUE if flagged and FALSE if not flagged.
 */
function is_flagged($order_id) {
  $result = array();
  $result = db_select('uc_checkoutpayment_flagged_orders', 'c')
    ->fields('c')
    ->condition('order_id', $order_id, '=')
    ->execute()
    ->fetchObject();

  if ($result->is_flagged == 0) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Method to return all cko settings.
 *
 * @return array
 *   An array with the CKO settings.
 */
function cko_store_settings() {
  $payment_method = array();

  if (variable_get('cko_autocaptime') == '') {
    variable_set('cko_autocaptime', 0);
  }

  if (variable_get('cko_integration') != 'hosted') {
    variable_set('cko_paymentMode', 'cards');
  }

  $payment_method['settings'] = array(
    'private_key'     => variable_get('cko_private_key', ''),
    'public_key'      => variable_get('cko_public_key', ''),
    'webhook_key'     => variable_get('cko_webhook_key', ''),
    'mode'            => variable_get('cko_mode', 'live'),
    'debugMode'       => variable_get('cko_debugMode', FALSE),
    'payment_action'  => variable_get('cko_payment_action', ''),
    'autocaptime'     => variable_get('cko_autocaptime', 0),
    'paymentMode'     => variable_get('cko_paymentMode', 'mixed'),
    'is3D'            => variable_get('cko_is3D', FALSE),
    'timeout'         => variable_get('cko_timeout', 60),
    'logourl'         => variable_get('cko_logourl', ''),
    'themecolor'      => variable_get('cko_themecolor', ''),
    'title'           => variable_get('cko_title', variable_get('site_name', "Default site name")),
    'subtitle'        => variable_get('cko_subtitle', ''),
    'button_label'    => variable_get('cko_button_label', ''),
    'currencycode'    => variable_get('cko_currencycode', 'false'),
    'cko_language'    => variable_get('cko_language', 'EN-GB'),
    'cko_integration' => variable_get('cko_integration', 'hosted'),
    'cko_render_mode' => variable_get('cko_render_mode', 0),
  );

  return $payment_method;
}

/**
 * AJAX call to check if the order status has been changed.
 *
 * @param string $action
 *   The action we are waiting for.
 * @param int $contextId
 *   The id of the order.
 */
function uc_checkoutpayment_admin_call($action, $contextId = 0) {
  switch ($action) {
    case 'capture':
      $response = is_captured($contextId);
      break;

    case 'refund':
      $response = is_refunded($contextId);
      break;

    default:
      $response = FALSE;
  }

  drupal_json_output($response);
}

/**
 * Adds logmessages to Watchdog when in debug mode.
 *
 * Simple usage:
 *   add_log('An action happened', array('key'=>'value'));
 *
 * @param string $string
 *   The message to be set in Watchdogs.
 * @param array|null $variables
 *   The variables used when the log is made.
 */
function add_log($string, array $variables = array()){
  $settings = cko_store_settings()['settings'];

  if ($settings['debugMode']) {
    watchdog('uc_checkoutpayment', $string, $variables, WATCHDOG_DEBUG);
  }
}