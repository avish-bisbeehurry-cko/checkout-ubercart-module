<?php

/**
 * @file
 * Checkout.com Payment Plans module.
 *
 * This module provides Checkout.com payment plan integration to Ubercart,
 */

const TECHNICAL_NAME = "cko_payment_plan";
const USER_FRIENDLY_NAME = "Payment Plan";
const USER_FRIENDLY_PLURAL = "Payment Plans";
const CREATE_CONTENT_DESCRIPTION = "Payment Plans store all the necessary information in support of implementing subscription services, membership services, and other popular recurring payment models.";
const ADMIN_HELP_TEXT = "This module was created by <i class='cko-logo'></i><b>Checkout</b>.com.";

module_load_include('php', 'uc_checkoutpaymentplan', 'includes/methods/objects');

/**
 * Implements hook_menu().
 */
function uc_checkoutpaymentplan_menu() {
  $items = array();

  $items['uc_checkoutpaymentplan/develop'] = array(
    'title' => 'Developping page',
    'page callback' => 'page_development',
    /* Access neccecary for webhooks */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/subscriptions'] = array(
    'title' => t('Subscriptions'),
    'page callback' => 'ckopp_page_user_subscriptions',
    'page arguments' => array(1),
    'access arguments' => array('view own subscriptions'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/store/orders/subscriptions'] = array(
    'title' => t('Subscriptions'),
    'page callback' => 'ckopp_page_admin_subscriptions',
    'page arguments' => array(1),
    'access arguments' => array('view subscriptions'),
    'type' => MENU_CALLBACK,
  );

  $items['uc_checkoutpaymentplan/ajax'] = array(
    'title' => 'Ajax call',
    'page callback' => 'ckopp_ajax_call',
    /* Access neccecary for AJAX request */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function uc_checkoutpaymentplan_permission() {
  return array(
    'view own subscriptions' => array(
      'title' => t('View own subscriptions'),
      'description' => t(
        'Let a user view subscriptions linked to it\'s account.'
      ),
    ),
    'view subscriptions' => array(
      'title' => t('View subscriptions'),
      'description' => t('Allows you to see all user subscription pages.'),
    ),
    'delete own subscriptions' => array(
      'title' => t('Delete own subscriptions'),
      'description' => t(
        'Let a user delete subscriptions linked to it\'s account.'
      ),
    ),
    'delete subscriptions' => array(
      'title' => t('Delete subscriptions'),
      'description' => t('Allows you to delete all user subscription pages.'),
    ),
  );
}

/**
 * Implements hook_access().
 */
function uc_checkoutpaymentplan_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create ' . TECHNICAL_NAME, $account);
  }
  elseif ($op == 'update' || $op == 'delete') {
    if (
      user_access('edit own ' . TECHNICAL_NAME, $account)
      && ($account->uid == $node->uid)
    ) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_help().
 */
function uc_checkoutpaymentplan_help($path, $arg) {
  switch ($path) {
    case 'admin/help#uc_checkoutpaymentplan':
      ob_start();
        include 'includes/help.page.inc';
        $html = ob_get_clean();
      ob_end_flush();
      return $html;
  }
}

/*
 * Implements hook_cron().
 *
 * @todo Make the cron job work or delete this function.
 */
function uc_checkoutpaymentplan_cron() {
  $queue = DrupalQueue::get("uc_checkoutpaymentplan_worker");
  $queue->createQueue();
}

/*
 * Implements hook_cron_queue_info().
 *
 * @todo Make the cron job work or delete this function.
 */
function uc_checkoutpaymentplan_cron_queue_info(){
  watchdog("Checkout.com RP","uc_checkoutpaymentplan_cron_queue_info called");

  $queues['uc_checkoutpaymentplan_worker'] = array(
    'worker callback' => 'uc_checkoutpaymentplan_worker',
  );
  return $queues;
}

/**
 * Implements hook_form_alter().
 */
function uc_checkoutpaymentplan_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'uc_payment_method_settings_form':
      $form['checkoutpayment_recurring'] = array(
        '#type' => 'fieldset',
        '#title' => t('Recurring Payments'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['checkoutpayment_recurring']['ckopp_autocaptime'] = array(
        '#type' => 'textfield',
        '#title' => t('Standard auto capture time'),
        '#description' => t(
          'This autocapture time will be used unless another is specified.'
        ),
      );
      break;

    case 'cko_payment_plan_node_form':
      $form['#validate'][] = 'uc_checkoutpaymentplan_form_validate';

      $form['cko_pp'] = array(
        "#type" => "fieldset",
        "#access"=> TRUE,
        "#title" => "Recurring Payments *",
        "#collapsible" => TRUE,
        "#collapsed" => TRUE,
        "#weight" => -8,
        "#group" => "additional_settings",
        "#attributes" => array(
          "class" => array(
            "comment-node-settings-form"
          ),
        ),
      );

      $form['cko_pp']['ckopp_pp_plan_id'] = array(
        '#type' => 'textfield',
        '#title' => t('PlanId'),
        '#disabled' => TRUE,
        '#description' => t(
          'Payment plan id, provided by <i class="cko-logo"></i>
          <b>Checkout</b>.com, prefixed with <i>rp_</i> for identical
          recurring plans.'
        ),
      );

      $form['cko_pp']['ckopp_pp_cycle'] = array(
        '#type' => 'textfield',
        '#title' => t('Cycle'),
        '#required' => TRUE,
        '#description' => t(
          'Elapsed time between the charge and the first transaction of the
          recurring plan.'
        ),
      );

      $form['cko_pp']['ckopp_pp_recurring_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Recurring Count'),
        '#required' => TRUE,
        '#description' => t(
          'Number of recurring transactions included in the Payment Plan.'
          ) . tooltip(
            '<b>Note</b>: recurringCount does not include the initial payment.'
          ),
      );

      $form['cko_pp']['ckopp_pp_status'] = array(
        '#type' => 'select',
        '#title' => t('Status'),
        '#description' => t(
          'Defines the status of the recurring payment plan.'
          ) . tooltip(
            'It is used for the endpoint that will allow to monitor the
            health of a recurring plan.'
          ),
        '#options' => array(
          1 => t('Active'),
          4 => t('Suspended'),
        ),
      );

      $form['cko_pp']['ckopp_pp_autocaptime'] = array(
        '#type' => 'textfield',
        '#title' => t('Auto capture time'),
        '#description' => t(
          'Delayed capture time in hours for the transactions generated by
          the recurring engine.'
        ),
        '#default_value' => 0
      );

      $form['base']['model']['#description'] = t(
        'Unique identifier for the recurring plan.'
      );
      $form['base']['prices']['sell_price']['#description'] = t(
        'Customer purchase price per payment.'
      );
      $form['base']['shippable']['#default_value'] = 0;

      if ($form['base']['model']['#default_value'] != '') {
        $payment_plan = new PaymentPlan;
        $payment_plan->trackId = $form['base']['model']['#default_value'];
        $payment_plan->get();

        $form['base']['model']['#disabled'] = TRUE;
        $form['cko_pp']['ckopp_pp_cycle']['#disabled'] = TRUE;
        $form['cko_pp']['ckopp_pp_recurring_count']['#disabled'] = TRUE;
        $form['cko_pp']['ckopp_pp_plan_id']['#value'] = $payment_plan->id;
        $form['cko_pp']['ckopp_pp_cycle']['#default_value'] = $payment_plan->cycle;
        $form['cko_pp']['ckopp_pp_recurring_count']['#default_value'] = $payment_plan->recurringCount;
        $form['cko_pp']['ckopp_pp_status']['#default_value'] = $payment_plan->status;
        $form['cko_pp']['ckopp_pp_autocaptime']['#default_value'] = $payment_plan->autoCapTime;
      }
      break;

    case 'uc_cart_view_form':
      $items = uc_cart_get_contents();
      $hasSubscription = false;

      foreach ($items as $item) {
        if ($item->type == 'cko_payment_plan' && $hasSubscription) {
          uc_cart_remove_item($item->nid, NULL, $item->data);
          drupal_set_message(
            t(
              'We removed :subscription, since only one subscription can be
              bought at the same time',
              array(
                ':subscription' => $item->title
              )
            ), 
            'warning'
          );
          drupal_goto('cart');
        }
        elseif ($item->type == 'cko_payment_plan') {
          $hasSubscription = true;
          if ($item->qty > 1) {
            drupal_set_message(
              t(
                'We removed :qty instances of :subscription, since only one
                subscription can be bought at the same time',
                array(
                  ':qty' => $item->qty - 1,
                  ':subscription' => $item->title
                )
              ), 
              'warning'
            );
            $item->qty = 1;
            uc_cart_update_item($item);
            drupal_goto('cart');
          }
        }
      }

      break;
  }
}

/**
 * Implements hook_validate().
 */
function uc_checkoutpaymentplan_form_validate(&$elements, &$form_state, $form_id = NULL) {
  switch ($form_state['build_info']['form_id']) {
    case 'cko_payment_plan_node_form':
      $values = $form_state['values'];
      $errors = array();

      $payment_plan = new PaymentPlan;
      $errors['ckopp_pp_cycle'] = $payment_plan->validate(
        'cycle', $values['ckopp_pp_cycle']
      );
      $errors['ckopp_pp_recurring_count'] = $payment_plan->validate(
        'recurringCount', $values['ckopp_pp_recurring_count']
      );
      $errors['ckopp_pp_status'] = $payment_plan->validate(
        'status', $values['ckopp_pp_status']
      );
      $errors['ckopp_pp_autocaptime'] = $payment_plan->validate(
        'autoCapTime', $values['ckopp_pp_autocaptime']
      );
      $errors['model'] = $payment_plan->validate(
        'trackId', $values['model']
      );
      $errors['sell_price'] = $payment_plan->validate(
        'value', $values['sell_price']
      );

      foreach ($errors as $field => $message) {
        if ($message != null) {
          form_set_error($field, $message);
        }
      }
      break;
  }
}

/**
 * Implements hook_form_submit().
 */
function uc_checkoutpaymentplan_form_submit($form, &$form_state) {
  switch ($form_id) {
    case 'uc_payment_method_settings_form':
      // @Todo save these settings.
      break;

    case 'cko_payment_plan_node_form':
      // @Todo save these settings.
      break;
  }
}

/**
 * Implements hook_node_insert().
 */
function uc_checkoutpaymentplan_node_insert($node) {
  if ($node->type = "cko_payment_plan") {
    $payment_plan = new PaymentPlan;

    $payment_plan->name           = $node->title;
    $payment_plan->trackId        = $node->model;
    $payment_plan->autoCapTime    = $node->ckopp_pp_autocaptime;
    $payment_plan->currency       = 'EUR';
    $payment_plan->value          = round($node->sell_price * 100, 0);
    $payment_plan->cycle          = $node->ckopp_pp_cycle;
    $payment_plan->recurringCount = $node->ckopp_pp_recurring_count;
    $payment_plan->status         = $node->ckopp_pp_status;

    $response = $payment_plan->create();
  }
}

/**
 * Implements hook_node_update().
 */
function uc_checkoutpaymentplan_node_update($node) {
  if ($node->type = "cko_payment_plan") {
    $payment_plan = new PaymentPlan;

    $payment_plan->id          = $node->ckopp_pp_plan_id;
    $payment_plan->name        = $node->title;
    $payment_plan->trackId     = $node->model;
    $payment_plan->autoCapTime = $node->ckopp_pp_autocaptime;
    $payment_plan->value       = round($node->sell_price * 100, 0);
    $payment_plan->status      = $node->ckopp_pp_status;

    $response = $payment_plan->update();
  }
}

/**
 * Implements hook_node_delete().
 */
function uc_checkoutpaymentplan_node_delete($node) {
  if ($node->type = "cko_payment_plan") {
    $payment_plan = new PaymentPlan;
    $payment_plan->trackId = $node->model;
    $response = $payment_plan->delete();
  }
}

/**
 * Implements hook_cko_processing_alter().
 */
function uc_checkoutpaymentplan_cko_processing_alter(&$order, &$config) {
  foreach ($order->products as $key => $value) {
    if ($value->data["type"] == 'cko_payment_plan') {
      $customer_payment_plan = new CustomerPaymentPlan;

      if (
        !$customer_payment_plan->exists($order->primary_email, $value->model)
      ) {
        $config['postedParam']['paymentPlans'][] = array(
          "planId" => $customer_payment_plan->planId,
        );
        $config['postedParam']['transactionIndicator'] = 2;
      }
      else {
        pre_var_dump($order, true);
        uc_cart_remove_item($value->nid, NULL, $value->data);
        drupal_set_message(
          t(
            "You are already subscribed to :subscription",
            array(
              ':subscription' => $value->title
            )
          ), "error");
        $config = array();
        drupal_goto('cart');
      }
    }
    
  }
}

/**
 * Implements hook_cko_webhook_alter().
 */
function uc_checkoutpaymentplan_cko_webhook_alter(&$object_charge) {
  //error_log("This function ran: " . pre_var_dump($object_charge, true), 0);
}

/**
 * Implements hook_cko_syncronise_alter().
 */
function uc_checkoutpaymentplan_cko_syncronise_alter(&$config) {
  // The local database is not yet used.
}

/**
 * Outputs the "/user/%user/subscriptions" page.
 *
 * @param object $user
 *   The Drupal user object of the visited user.
 *
 * @return string
 *   The html output value.
 */
function ckopp_page_user_subscriptions($user) {
  global $user;
  if (
    !user_access('view subscriptions') && 
    !(
      user_access('view own subscriptions') && 
      explode('/',current_path())[1] === $user->uid
    )
  ) {
    return drupal_access_denied();
  }

  drupal_set_title($title = "Subscriptions", $output = CHECK_PLAIN);

  $customer = new Customer;
  $customer->email = $user->mail;
  $customer->get();

  $header = array('Subscription', 'End date', 'Amount', 'Actions');

  $list = new CheckoutComList;
  $list->queryObject = new CustomerPaymentPlan;
  $list->queryObject->customerId = $customer->id;
  $list->getAll();

  if (!empty($list->list)) {
    $rows = array();
    foreach ($list->list as $customer_payment_plan) {
      $payment_plan = new PaymentPlan;
      $payment_plan->id = $customer_payment_plan->planId;
      $payment_plan->get();
  
      $actions = drupal_get_form(
        'ckopp_subscription_actions_form', 
        array(
          'id' => $customer_payment_plan->id
        )
      );
  
      $rows[] = array(
        $payment_plan->name,
        $customer_payment_plan->nextRecurringDate,
        $payment_plan->currency . ' ' . $payment_plan->value . ' per ' . $payment_plan->cycle,
        render($actions),
      );
    }
  
    return theme('table', array('header' => $header, 'rows' => $rows));
  }

  return '<div class="messages info">' . t('There are no active subscriptions.') . '</div>';
}

/**
 * Outputs the "/admin/store/subscriptions" page.
 *
 * @return string
 *   The html output value.
 */
function ckopp_page_admin_subscriptions() {
  drupal_set_title($title = "Subscriptions overview", $output = CHECK_PLAIN);

  $header = array(
    'status' => '',
    'subscription' => 'Subscription',
    'customer' => 'Customer name',
    'installmentsPayed' => 'Installments payed',
    'nextRecurringDate' => 'Next payment',
    'frequency' => 'Frequency',
    'actions' =>'Actions'
  );

  $list = new CheckoutComList;
  $list->queryObject = new CustomerPaymentPlan;
  $list->getAll();

  if (!empty($list->list)) {
    $rows = array();
    foreach ($list->list as $customer_payment_plan) {
      $row = $header;

      $row['nextRecurringDate'] = $customer_payment_plan->getString('nextRecurringDate');

      if ($customer_payment_plan->status != 1) {
        $row['status'] = '<div class="cko-warning"> </div>';
      }

      $row['actions'] = drupal_get_form(
        'ckopp_subscription_actions_form',
        array(
          'id' => $customer_payment_plan->id,
          'view' => 'list',
        )
        
      );
      $row['actions'] = drupal_render($row['actions']);

      $payment_plan = new PaymentPlan;
      $payment_plan->id = $customer_payment_plan->planId;
      $payment_plan->get();

      $row['frequency'] = $payment_plan->getString('cycle');

      $row['installmentsPayed'] = ckopp_html(
        'progressbar',
        array(
          'percentage' => round(
            (($payment_plan->recurringCount - $customer_payment_plan->recurringCountLeft)/$payment_plan->recurringCount)*100
          )
        )
      );

      $result = db_select('uc_products', 'p')
        ->fields('p')
        ->condition('model', $payment_plan->trackId, '=')
        ->orderBy('vid', 'DESC')
        ->execute()
        ->fetchObject();

      if (empty($result)) {
        $row['subscription'] = $payment_plan->name . tooltip(
          'This subscription has no matching node on this website.'
        );
      }
      else {
        $row['subscription'] = l(
          $payment_plan->name, 
          drupal_get_path_alias('node/' . $result->nid)
        );
      }

      $customer = new Customer;
      $customer->id = $customer_payment_plan->customerId;
      $customer->get();

      if ($user = user_load_by_mail($customer->email)) {
        $row['customer'] = l($customer->name, 'user/' . $user->uid);
      }
      else {
        $row['customer'] = $customer->name . tooltip(
          'This person does not have an account on this website.'
        );
      }

      $rows[] = $row;
    }
  
    return '<div id="cko-subscription-details" class="hidden"></div>' . theme('table', array('header' => $header, 'rows' => $rows));
  }

  return '<div class="messages info">' . t('There are no active subscriptions.') . '</div>';
}

/**
 * This function is used to respond to AJAX callbacks.
 *
 * @param mixed $form
 *   The form array which called AJAX.
 * @param mixed $form_state
 *   The form state array of the form which called AJAX.
 * @param array $config
 *   The configuration array for the element.
 *
 * @return mixed
 *   This could be a string, a build array, json string, ...
 */
function ckopp_subscription_actions_form($form, &$form_state, array $config = array()) {
  global $user;

  if (
    user_access('delete subscriptions') || 
    (
      user_access('delete own subscriptions') && 
      explode('/',current_path())[1] === $user->uid
    )
  ) {
    $form['cko_remove'] = array(
      '#type' => 'button',
      '#action' => $config['id'],
      '#value'  => t('Delete'),
      '#prefix' => '<div id="delete_' . $config['id'] . '" class="cko_float_left">',
      '#suffix' => '</div>',
      '#ajax' => array(
        'callback' => 'ckopp_ajax_call',
        'wrapper' => 'delete_' . $config['id'],
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
  }

  $form['cko_view'] = array(
    '#type' => 'button',
    '#action' => $config['id'],
    '#value' => t('View'),
    '#ajax' => array(
      'callback' => 'ckopp_ajax_call',
      'wrapper' => 'cko-subscription-details',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  return $form;
}

/**
 * This function is used to respond to AJAX callbacks.
 *
 * @param mixed $form
 *   The form array which called AJAX.
 * @param mixed $form_state
 *   The form state array of the form which called AJAX.
 *
 * @return mixed
 *   This could be a string, a build array, json string, ...
 */
function ckopp_ajax_call($form, $form_state) {
  switch ($form["#form_id"]) {
    case 'ckopp_subscription_actions_form':
      $cpp = new CustomerPaymentPlan;
      $cpp->id = $form_state['triggering_element']["#action"];

      pre_var_dump($form_state['triggering_element']["#value"], true);
      switch ($form_state['triggering_element']["#value"]) {
        case 'Delete':
          if ($cpp->delete()) {
            $build['checkoutpayment_recurring'] = array(
              '#type' => 'html_tag',
              '#tag' => 'p',
              '#value' => t('Cancelled'),
              '#attributes' => array(
                'class' => 'ok'
              )
            );
            return render($build);
          }
          break;

        case 'View':
          $cpp->get();

          $c = new Customer;
          $c->id = $cpp->customerId;

          $pp = new PaymentPlan;
          $pp->id = $cpp->planId;

          if ($c->get() && $pp->get()) {
            $actions = drupal_get_form(
              'ckopp_subscription_actions_form',
              array(
                'id' => $cpp->id,
              )
            );

            $ckopp_html_config = array(
              'title' => $c->name . ' - ' . $pp->getString('name'),
              'fields' => array(
                "Status" => $cpp->getString('status'),
                "Value" => $pp->getString('value'),
                "Plan ID" => $cpp->getString('id'),
                "Customer Plan ID" => $cpp->getString('customerId'),
                "Plan Track ID" => $pp->trackId,
                "Plan Duration" => $pp->getString('recurringCount'),
                "Card" => $cpp->getString('cardId'),
                "Total Collection Value" => $cpp->getString('totalCollectionValue'),
                "Total Collection Count" => $cpp->getString('totalCollectionCount'),
                "Frequency" => $pp->getString('cycle'),
                "Recurring Count Left" => $cpp->getString('recurringCountLeft'),
                "Previous Recurring Date" => $cpp->getString('previousRecurringDate'),
                "Next Recurring Date" => $cpp->getString('nextRecurringDate'),
              ),
              'actions' => drupal_render($actions),
              'wrapper' => 'cko-subscription-details'
            );
            return ckopp_html('fieldset', $ckopp_html_config);
          }
          break;


      }

      $build['checkoutpayment_recurring'] = array(
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#value' => t('Somthing went wrong, try again later.'),
        '#attributes' => array(
          'id' => 'cko-subscription-details',
          'class' => array(
            'messages',
            'error'
          )
        )
      );
      return render($build);
      break;
  }
}

/**
 * Formatting function to create HTML tooltips in strings.
 *
 * @todo Make the cron job work or delete this function.
 */
function cko_cron_worker() {
  watchdog("Checkout.com RP","ckopp_syncronise called");
  error_log("TEST THIS FUNCTION " . date("Y-m-d H:i:s"), 0);
}

/**
 * Developer function to print variables in a clean way.
 *
 * @param mixed $var
 *   Any variable of anytype.
 */
function pre_var_dump($var , $buffer = false) {
  if ($buffer) {
    ob_start();
    var_dump($var);
    $string = ob_get_clean();
    error_log($string, 0);
    return $string;
  }

  echo '<pre>';
  var_dump($var);
  echo '</pre>';
}

/**
 * Developer function which gives access to a developper page.
 *
 * @return mixed
 *   The output used for rendering the page.
 */
function page_development() {
  $list = new CheckoutComList;
  $list->queryObject = new CustomerPaymentPlan;
  $list->queryObject->customerId = 'cust_EA616CB6-6C8A-4419-A837-F243245C9F81';
  $list->getAll();

  pre_var_dump($list);

  return 'NULL';
}

/**
 * Formatting function to create HTML tooltips in strings.
 *
 * @param string $string
 *   A string which should be placed inside a tooltip.
 *
 * @return string
 *   The HTML code for the tooltip with translated text.
 */
function tooltip($string) {
  return '&nbsp;<div class="tooltip"> ? <span class="tooltiptext">' . t($string) . '</span></div>&nbsp;';
}

/**
 * Formatting function to create HTML tooltips in strings.
 * 
 * Possible usages:
 *   ckopp_html(
 *     'progressbar',
 *     array(
 *       'percentage' => 75,
 *       ['wrapper' => 'wrapper id']
 *     )
 *   );
 * 
 *   ckopp_html(
 *     'subscription details',
 *     array(
 *       'title' => 'Example title'
 *       'properties' => array(
 *         'label 1' => 'value 1',
 *         'label 2' => 'value 2',
 *       ),
 *       ['wrapper' => 'wrapper id']
 *     )
 *   );
 *
 * @param string $element
 *   The HTML element to be generated.
 * @param array $config
 *   The configuration setting for the element.
 *
 * @return string
 *   The HTML code for the tooltip with translated text.
 */
function ckopp_html($element, array $config = array()) {
  switch ($element) {
    case 'fieldset':
      $renderedProps = "";

      foreach ($config['fields'] as $label => $value) {
        $renderedProps .= '
        <labelled-field class="cko-fieldset-fields">
          <label> '. $label . '</label>
          <field> '. $value . '</field>
        </labelled-field>';
      }

      $build['checkoutpaymentplan_subscription'] = array(
        '#markup' => '<fieldset id="cko-fieldset">
        <legend>
          ' . $config['title'] . '
        </legend>
        <div>
          <div>
            ' . $renderedProps . '
          </div>
          <div class="cko-fieldset-actions">
              ' . $config['actions'] . '
          </div>
        </div>
      </fieldset>'
      );

      break;

    case 'progressbar':
      return '
        <div class="ckopp_progressbar" >
          <div style="width: ' . $config['percentage'] . '%;" ></div>
          <span>'. $config['percentage'] . '%</span>
        </div>
      ';
      break;
  }

  if (array_key_exists('wrapper', $config)) {
    return '
      <div id="' . $config['wrapper'] . '" style="display: block;">
        ' . render($build) . '
      </div>';
  }

  return render($build);
}

