<?php

/**
 * @file
 * Checkout.com Payment Plans module.
 *
 * This module provides Checkout.com payment plan integration to Ubercart,
 */

const TECHNICAL_NAME = "cko_payment_plan";
const USER_FRIENDLY_NAME = "Payment Plan";
const USER_FRIENDLY_PLURAL = "Payment Plans";
const CREATE_CONTENT_DESCRIPTION = "Payment Plans store all the necessary information in support of implementing subscription services, membership services, and other popular recurring payment models.";
const ADMIN_HELP_TEXT = "This module was created by <i class='cko-logo'></i><b>Checkout</b>.com.";

module_load_include('php', 'uc_checkoutpaymentplan', 'includes/methods/objects');


/**
 * Implements hook_perm().
 */
function uc_checkoutpaymentplan_perm() {
  return array('create ' . TECHNICAL_NAME, 'edit own ' . TECHNICAL_NAME);
}

/**
 * Implements hook_access().
 */
function uc_checkoutpaymentplan_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create ' . TECHNICAL_NAME, $account);
  }
  elseif ($op == 'update' || $op == 'delete') {
    if (
      user_access('edit own ' . TECHNICAL_NAME, $account)
      && ($account->uid == $node->uid)
    ) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_help().
 */
function uc_checkoutpaymentplan_help($path, $arg) {
  switch ($path) {
    case 'admin/help#uc_checkoutpaymentplan':
      ob_start();
        include 'includes/help.page.inc';
        $html = ob_get_clean();
      ob_end_flush();
      return $html;
  }
}

/**
 * Implements hook_form_alter().
 */
function uc_checkoutpaymentplan_form_alter(&$form, &$form_state, $form_id) {
  //pre_var_dump($form);

  switch ($form_id) {
    case 'uc_payment_method_settings_form':
      $form['checkoutpayment_recurring'] = array(
        '#type' => 'fieldset',
        '#title' => t('Recurring Payments'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['checkoutpayment_recurring']['ckopp_autocaptime'] = array(
        '#type' => 'textfield',
        '#title' => t('Standard auto capture time'),
        '#required' => TRUE,
        '#description' => t('This autocapture time will be used unless another is specified.'),
      );
      break;

    case 'cko_payment_plan_node_form':
      $form['cko_pp'] = array(
        "#type" => "fieldset",
        "#access"=> TRUE,
        "#title" => "Recurring Payments *",
        "#collapsible" => TRUE,
        "#collapsed" => TRUE,
        "#weight" => -8,
        "#group" => "additional_settings",
        "#attributes" => array(
          "class" => array(
            "comment-node-settings-form"
          ),
        ),
      );

      $form['cko_pp']['ckopp_pp_plan_id'] = array(
        '#type' => 'textfield',
        '#title' => t('PlanId'),
        '#disabled' => TRUE,
        '#description' => t('Payment plan id, provided by <i class="cko-logo"></i><b>Checkout</b>.com, prefixed with <i>rp_</i> for identical recurring plans.'),
      );

      $form['cko_pp']['ckopp_pp_cycle'] = array(
        '#type' => 'textfield',
        '#title' => t('Cycle'),
        '#required' => TRUE,
        '#description' => t('Elapsed time between the charge and the first transaction of the recurring plan.'),
      );

      $form['cko_pp']['ckopp_pp_recurring_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Recurring Count'),
        '#required' => TRUE,
        '#description' => t('Number of recurring transactions included in the Payment Plan.') . tooltip('<b>Note</b>: recurringCount does not include the initial payment.'),
      );

      $form['cko_pp']['ckopp_pp_status'] = array(
        '#type' => 'select',
        '#title' => t('Status'),
        '#description' => t('Defines the status of the recurring payment plan.') . tooltip('It is used for the endpoint that will allow to monitor the health of a recurring plan.'),
        '#options' => array(
          1 => t('Active'),
          4  => t('Suspended'),
        ),
      );

      $form['cko_pp']['ckopp_pp_autocaptime'] = array(
        '#type' => 'textfield',
        '#title' => t('Auto capture time'),
        '#description' => t('Delayed capture time in hours for the transactions generated by the recurring engine.'),
      );

      $form['base']['model']['#description'] = t('Unique identifier for the recurring plan.');
      $form['base']['prices']['sell_price']['#description'] = t('Customer purchase price per payment.');
      $form['base']['shippable']['#default_value'] = 0;

      if ($form['base']['model']['#default_value'] != '') {
        $payment_plan = get_payment_plan();
        $payment_plan->trackId = $form['base']['model']['#default_value'];
        $payment_plan->get();

        $form['base']['model']['#disabled'] = TRUE;
        $form['cko_pp']['ckopp_pp_plan_id']['#value'] = $payment_plan->id;
        $form['cko_pp']['ckopp_pp_cycle']['#default_value'] = $payment_plan->cycle;
        $form['cko_pp']['ckopp_pp_recurring_count']['#default_value'] = $payment_plan->recurringCount;
        $form['cko_pp']['ckopp_pp_status']['#default_value'] = $payment_plan->status;
        $form['cko_pp']['ckopp_pp_autocaptime']['#default_value'] = $payment_plan->autoCapTime;
      }
      break;
  }
}

/**
 * Implements hook_form_submit().
 */
function uc_checkoutpaymentplan_form_submit($form, &$form_state) {
  switch ($form_id) {
    case 'uc_payment_method_settings_form':
      // @Todo save these settings.
      break;

    case 'cko_payment_plan_node_form':
      // @Todo save these settings.
      break;
  }
}

/**
 * Implements hook_node_insert().
 */
function uc_checkoutpaymentplan_node_insert($node) {
  if ($node->type = "cko_payment_plan") {
    $payment_plan = get_payment_plan();

    $payment_plan->name           = $node->title;
    $payment_plan->trackId        = $node->uid;
    $payment_plan->autoCapTime    = 0;
    $payment_plan->currency       = 'EUR';
    $payment_plan->value          = $node->sell_price;
    $payment_plan->cycle          = '7d';
    $payment_plan->recurringCount = 7;
    $payment_plan->status         = 1;

    $response = $payment_plan->save();
  }
}

/**
 * Developer function to print variables in a clean way.
 *
 * @param mixed $var
 *   Any variable of anytype.
 */
function pre_var_dump($var) {
  echo '<pre>';
  var_dump($var);
  echo '</pre>';
}

/**
 * Formatting function to create HTML tooltips in strings.
 *
 * @param string $string
 *   A string which should be placed inside a tooltip.
 *
 * @return string
 *   The HTML code for the tooltip with translated text.
 */
function tooltip($string) {
  return ' <div class="tooltip">?<span class="tooltiptext">' . t($string) . '</span></div> ';
}

/**
 * Include function for the objects.
 *
 * @return PaymentPlan
 *   A payment plan object.
 */
function get_payment_plan() {
  return new PaymentPlan;
}