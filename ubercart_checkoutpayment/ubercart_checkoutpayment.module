<?php

/**
 * @file
 * This module provides Checkout.com payment gateway integration to Ubercart,
 * Ubercart Checkoutpayment offers a PCI-compliant way to process payments.
 */

const CHECKOUT_API_RESPONSE_CODE_APPROVED       = 10000;
const CHECKOUT_API_RESPONSE_CODE_APPROVED_RISK  = 10100;
const CHECKOUT_API_PLUGIN_VERSION               = '7.x-2.9'; //TODO
const HOSTED_URL_SANDOX             = 'https://secure.checkout.com/sandbox/payment/';
const HOSTED_URL_LIVE               = 'https://secure.checkout.com/payment/';
const EVENT_TYPE_CHARGE_SUCCEEDED   = 'charge.succeeded';
const EVENT_TYPE_CHARGE_CAPTURED    = 'charge.captured';
const EVENT_TYPE_CHARGE_REFUNDED    = 'charge.refunded';
const EVENT_TYPE_CHARGE_VOIDED      = 'charge.voided';
const EVENT_TYPE_INVOICE_CANCELLED  = 'invoice.cancelled';

/**
 * Implements hook_init().
 */
function ubercart_checkoutpayment_init() {
  global $conf;
  $conf['i18n_variables'][] = 'ubercart_checkoutpayment_method_title';
  $conf['i18n_variables'][] = 'ubercart_checkoutpayment_checkout_button';
}

/**
 * Implements hook_variable_info().
 */
function ubercart_checkoutpayment_variable_info($options) {
  $variable['ubercart_checkoutpayment_method_title'] = array(
    'title' => t('Checkout.com - method title'),
    'description' => t('Name for Checkout.com payment method presented to the customer.'),
  );
  $variable['ubercart_checkoutpayment_checkout_button'] = array(
    'title' => t('Checkout.com - checkout button'),
    'description' => t('Text on checkout button when paying via Checkout.com.'),
  );

  return $variable;  
}

/**
 * Implements hook_menu().
 */
function ubercart_checkoutpayment_menu() {
  $items = array();
  
  $items['checkoutapi/process'] = array(
    'title' => 'Ipn checkout',
    'page callback' => 'ubercart_checkoutpayment_process_order',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ubercart_checkoutpayment/success'] = array(
    'title' => 'Success page',
    'page callback' => 'ubercart_checkoutpayment_success_order',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ubercart_checkoutpayment/process_charge'] = array(
    'title' => 'Create Order page',
    'page callback' => 'ubercart_checkoutpayment_process_charge',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ubercart_checkoutpayment/fail'] = array(
    'title' => 'Fail Order page',
    'page callback' => 'ubercart_checkoutpayment_fail_order',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_uc_payment_method().
 * I have no clue where this is used //TODO
 */
function ubercart_checkoutpayment_uc_payment_method() {  
  $methods[] = array(
    'id' => 'checkoutpayment',
    'name' => t('Credit / Debit cards (Checkout.com)'),
    'title' => variable_get('ubercart_checkoutpayment_method_title',
      t('Credit / Debit cards (Checkout.com)')),
    'desc' => t('Redirect to Checkout.com to pay.'),
    'callback' => 'uc_payment_method_checkoutpayment',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implements hook_payment_method_callback($op, &$arg1, $silent = FALSE)
 * method callback: settings form.
 */
function uc_payment_method_checkoutpayment($op, &$arg1) {
  module_load_include('module', 'uc_credit', 'uc_credit');
  
  switch ($op) {
    case 'settings':
      global $base_url;
      $form['checkoutpayment_help_text'] = array(
        '#markup' => '<div class="help">' . t('<h4><strong>Checkout.com Payment Settings</strong></h4><p>Go to https://sandbox.checkout.com to properly install this module.</p>', array('%base_url' => $base_url)) . '</div>',
      );

      $settings = ubercart_checkoutpayment_payment_method()['settings'];

      $form['checkoutpayment_account'] = array(
        '#type' => 'fieldset',
        '#title' => t('Account settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['checkoutpayment_account']['private_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Secret Key'),
        '#required' => TRUE,
        '#description' => t('The Checkout.com account secret API key to use .'),
        '#default_value' => $settings['private_key'],
      );
    
      $form['checkoutpayment_account']['public_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Public Key'),
        '#required' => TRUE,
        '#description' => t('The Checkout.com account publishable API key to use.'),
        '#default_value' => $settings['public_key'],
      );

      $form['checkoutpayment_account']['webhook_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Webhook shared private key'),
        '#required' => TRUE,
        '#description' => t('The private shared key to check that the message comes from Checkout.'),
        '#default_value' => $settings['webhook_key'],
      );
    
      $form['checkoutpayment_account']['mode'] = array(
        '#type' => 'select',
        '#title' => t('Endpoint Url Mode'),
        '#description' => t('Perform transactions on the production server or on the testing server.'),
        '#default_value' => $settings['mode'],
        '#options' => array(
          'live' => t('Live'),
          'sandbox' => t('Sandbox'),
        ),
      );
    
      $form['checkoutpayment_transaction'] = array(
        '#type' => 'fieldset',
        '#title' => t('Payment settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['checkoutpayment_transaction']['payment_action'] = array(
        '#type' => 'select',
        '#title' => t('Transaction Method'),
        '#description' => t('The processing method to use for each transaction.'),
        '#default_value' => $settings['payment_action'],
        '#options' => array(
          UC_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
          UC_CREDIT_AUTH_ONLY => t('Authorization only (requires manual capture after checkout)'),
        ),
      );
    
      $form['checkoutpayment_transaction']['autocaptime'] = array(
        '#type' => 'textfield',
        '#title' => t('Set Gateway auto capture time.'),
        '#description' => t('Set how long will the payment be capture.'),
        '#default_value' => $settings['autocaptime'],
      );

      $form['checkoutpayment_transaction']['paymentMode'] = array(
        '#type' => 'select',
        '#title' => t('Payment Mode'),
        '#options' => array(
          'cards' => t('Card'),
          'localPayment' => t('Local Payment'),
          'mixed' => t('Mixed')
        ),
        '#default_value' => $settings['paymentMode'],
      );
    
      $form['checkoutpayment_transaction']['type'] = array(
        '#type' => 'select',
        '#title' => t('Method Type (Pci enabled)'),
        '#description' => t('Verify gateway server SSL certificate on connection?'),
        '#options' => array(
          'pci' => t('Yes'),
          'nonpci' => t('No'),
        ),
        '#default_value' => $settings['type'],
      );
    
      $form['checkoutpayment_transaction']['is3D'] = array(
        '#type' => 'select',
        '#title' => t('Enable 3D'),
        '#description' => t('If you want to process all transactions as 3D secure, select Yes'),
        '#options' => array(
          '1' => t('No'),
          '2' => t('Yes'),
        ),
        '#default_value' => $settings['is3D'],
      );
    
      $form['checkoutpayment_transaction']['timeout'] = array(
        '#type' => 'textfield',
        '#title' => t('Set Gateway timeout.'),
        '#description' => t('Set how long request timeout on server.'),
        '#default_value' => $settings['timeout'],
      );
    
      $form['checkoutpayment_ui'] = array(
        '#type' => 'fieldset',
        '#title' => t('Personalisation'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['checkoutpayment_ui']['logourl'] = array(
        '#type' => 'textfield',
        '#title' => t('Logo URL'),
        '#description' => t('This is the setting to display the logo on checkout.js (Max size: 180 x 36)'),
        '#default_value' => $settings['logourl'],
      );
    
      $form['checkoutpayment_ui']['themecolor'] = array(
        '#type' => 'textfield',
        '#title' => t('Theme color'),
        '#description' => t('Set theme color for checkout hosted'),
        '#default_value' => $settings['themecolor'],
      );
    
      $form['checkoutpayment_ui']['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#description' => t('Add a title on the hosted payment page'),
        '#default_value' => $settings['title'],
      );

      $form['checkoutpayment_ui']['subtitle'] = array(
        '#type' => 'textfield',
        '#title' => t('Subtitle'),
        '#description' => t('Add a subtitle on the hosted payment page'),
        '#default_value' => $settings['subtitle'],
      );

      $form['checkoutpayment_ui']['button_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Button label'),
        '#description' => t('Change the button label on the hosted payment page'),
        '#default_value' => $settings['button_label'],
      );

      $form['checkoutpayment_ui']['cko_language'] = array(
        '#type' => 'select',
        '#title' => t('Language'),
        '#description' => t('Change the language of the checkout hosted page'),
        '#options' => array(
          'DE-DE' => t('German'),
          'NL-NL' => t('Dutch'),
          'FR-FR' => t('French'),
          'KR-KR' => t('Korean'),
          'IT-IT' => t('Italian'),
          'EN-GB' => t('English'),
        ),
        '#default_value' => $settings['cko_language'],
      );
    
      $form['checkoutpayment_ui']['currencycode'] = array(
        '#type' => 'select',
        '#title' => t('Widget currency format'),
        '#description' => t('Display currency code or currency symbol on the checkout hosted'),
        '#options' => array(
          'true' => t('Code'),
          'false' => t('Symbol'),
        ),
        '#default_value' => $settings['currencycode'],
      );

      return $form;
      break;

    case 'cart-details':
      //return array('#markup' => t('placeholder text TODO')); // Under the payment method selection pane, when checkout.com is selected
      break;
    
    case 'cart-process':
      //return array('#markup' => t('placeholder text TODO 2')); // TODO
      break;

    case 'cart-review':
      return array('#markup' => t('Click "Proceed with payment" to go to Checkout.com for secure payment.')); // Add text under the review pane when using Checkout.com
      break;

    case 'customer-view':
      return array('#markup' => t('placeholder text TODO 4')); // Don't know where this happens
      break;
    
    case 'order-delete':
      // When order is deleted or cancelled
      break;

    case 'order-details':
      //return array('#markup' => t('placeholder text TODO 6')); // Shown to admin when edditing orders
      break;
      
    case 'order-load':
      // Called from hook_uc_order('load') when this payment method is selected for the order.
      break;

    case 'order-process':
      // Called when an order has been edited by an administrator.
      break;

    case 'order-save':
      // Called from hook_uc_order('save') when this payment method is selected for the order.
      break;

    case 'order-submit':
      // Called from hook_uc_order('submit') when this payment method is selected for the order.
      break;
      
    case 'order-save':
      // Called when the order is being displayed on the order admin pages.
      break;
    }
}

/**
 * Implements hook_form_alter() for uc_cart_checkout_review_form().
 */
function ubercart_checkoutpayment_form_uc_cart_checkout_review_form_alter(&$form, &$form_state) {
  if (($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);
    $preparedForm = drupal_get_form('ubercart_checkoutpayment_form', $order);

    if ($order->payment_method == 'checkoutpayment') {
      unset($form['actions']['submit']);
      $form['#prefix'] = '<table style="display: inline;"><tr class="review-button-row-inner"><td>';
      $form['#suffix'] = '</td><td>' . drupal_render($preparedForm) . '</td></tr></table>';

    }
  }
}

/**
 * Called when submitting the data to secure.checkout.com
 */
function ubercart_checkoutpayment_form($form, &$form_state, $order) {
  global $base_url;

  $payment_method = ubercart_checkoutpayment_payment_method();
  $settings       = $payment_method['settings'];

  $instance = ubercart_checkoutpayment_get_instance();
  $data     = $instance->getExtraInit($order, $payment_method);

  // Settings
  $hppUrl   = $settings['mode'] == 'sandbox' ? HOSTED_URL_SANDOX : HOSTED_URL_LIVE;
  $publicKey      = $settings['public_key'];
  $paymentMode    = $settings['paymentMode'];
  $themeColor     = $settings['themecolor'];
  $title          = $settings['title'];
  $logoUrl        = $settings['logourl'];
  $currencycode   = $settings['currencycode'];
  $subtitle       = $settings['subtitle'];
  $buttonLabel    = $settings['button_label'];
  $cko_language   = $settings['cko_language'];

  $cardFormMode   = "cardTokenisation";
  $redirectUrl    = $base_url . "?q=/ubercart_checkoutpayment/process_charge";
  $cancelUrl      = $base_url . "?q=/ubercart_checkoutpayment/fail";

  // Order details
  $contextId      = $order->order_id;
  $paymentToken   = $data['script']['paymentToken'];
  $customerEmail  = $data['script']['email'];
  $value          = $data['script']['amount'];
  $currency       = $data['script']['currency'];
  
  $billingDetails = '{"addressLine1":"'.$order->billing_street1     .'",
                      "addressLine2":"'.$order->billing_street2     .'",
                      "postcode":"    '.$order->billing_postal_code .'",
                      "country":"     '.uc_get_country_data(array('country_id' => $order->billing_country))[0]['country_iso_code_2']     .'",                                                  
                      "city":"        '.$order->billing_city        .'",
                      "state":"       '.$order->billing_zone        .'"
                    }'; 

  // Format data for form
  $data = array(
    'publicKey'       => $publicKey,
    'paymentToken'    => $paymentToken,
    'customerEmail'   => $customerEmail,
    'value'           => $value,
    'currency'        => $currency,
    'cardFormMode'    => $cardFormMode,
    'paymentMode'     => $paymentMode,
    'redirectUrl'     => $redirectUrl,
    'cancelUrl'       => $cancelUrl,
    'contextId'       => $contextId,
    'themeColor'      => $themeColor,
    'title'           => $title,
    'logoUrl'         => $logoUrl,
    'billingDetails'  => $billingDetails,
    'localisation'    => $cko_language,
    'subtitle'        => $subtitle,
    'buttonLabel'     => $buttonLabel,
    'useCurrencyCode' => $currencycode,
  );

  // Set form objects
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array(
        '#type' => 'hidden', 
        '#value' => $value,
        '#attributes' => array(
          'name' => array($name),
        )
      );
    }
  }

  // Set submit button
  $form['#action'] = url($hppUrl);
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get('ubercart_checkoutpayment_checkout_button', 'Proceed with payment'),
  );

  $_SESSION['cko_contextid'] = $contextId;

  return $form;
}

/**
 * Check if method is PCI or NON-PCI
 */
function ubercart_checkoutpayment_check_method_type(){ //TODO
  $payment_method = commerce_payment_method_instance_load('commerce_checkoutpayment|commerce_payment_commerce_checkoutpayment');
  if (isset($payment_method['settings']['type']) && $payment_method['settings']['type'] == 'pci') {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Retrieves all active instances definitions.
 */
function ubercart_checkoutpayment_get_instance() { //TODO
  
  module_load_include('php', 'ubercart_checkoutpayment', 'includes/autoload');

  // switch (variable_get('type', '')) {
  //   case 'pci':
  //      // We have no PCI implementation at this point in the development
  //     //break;

  //   default:
  //      $_instance = CheckoutApi_Lib_Factory::getInstance('methods_creditcard');
  //     break;
  // }

  return CheckoutApi_Lib_Factory::getInstance('methods_creditcard');
}

/**
 *
 * Verify Response code
 */
function responseValidation($result) {
  $responseCode       = (int)$result->getResponseCode();
  if ($responseCode !== CHECKOUT_API_RESPONSE_CODE_APPROVED && $responseCode !== CHECKOUT_API_RESPONSE_CODE_APPROVED_RISK) {
      return false;
  }
  return true;
}

/**
 * Mobile Redirect to success url: example.com/ubercart_checkoutpayment/success.
 */
function ubercart_checkoutpayment_success_order() { //TODO

  // if (!isset($_REQUEST['cko-payment-token'])) {
  //   drupal_goto();
  // }

  // module_load_include('php', 'ubercart_checkoutpayment', 'includes/autoload');

  // // To do get instance id from session
  // $instance_id = $_SESSION['cko_instance_id'];

  // $config['authorization'] = variable_get('private_key', '');
  // $config['paymentToken']  = $_REQUEST['cko-payment-token'];

  // $api           = CheckoutApi_Api::getApi(array('mode' => variable_get('mode', '')));
  // $object_charge = $api->verifyChargePaymentToken($config);

  // $order_id = $object_charge->getTrackId();
  // $order = commerce_order_load($order_id);
  // $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // $order_total = $order_wrapper->commerce_order_total->value();

  // $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  // $transaction->instance_id = $payment_method['instance_id'];
  // $transaction->amount = $order_total['amount'];
  // $transaction->currency_code = $order_total['currency_code'];
  // $transaction->payload[REQUEST_TIME] = $object_charge->getCreated();

  // $default_currency = commerce_default_currency();
  // $amount = number_format(commerce_currency_convert($order_total['amount'], $order_total['currency_code'], $default_currency), 0, '', '');
  // $to_validate = array(
  //   'currency' => $default_currency,
  //   'value' => $amount,
  //   'trackId' => $order_id,
  // );
  // $validate_request = $api::validateRequest($to_validate, $object_charge);

  // if (preg_match('/^1[0-9]+$/', $object_charge->getResponseCode())) {
  //   $transaction->message = 'Your transaction has been successfully authorized with transaction id : ' . $object_charge->getId();
  //   $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  //   commerce_payment_transaction_save($transaction);
  //   $order = commerce_order_status_update($order, 'checkout_complete', FALSE, TRUE, 'Your payment has been successfully completed');
  //   commerce_checkout_complete($order);
  //   drupal_goto(commerce_checkout_order_uri($order));
  // }
  // else { 
  //   $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  //   $transaction->message = $object_charge->getRawRespond();
  //   commerce_payment_transaction_save($transaction);
  //   drupal_set_message(t('An error has occured while processing your transaction. Please verify your information again or try a different card.'), 'error');
  //   $order = commerce_order_status_update($order, 'checkout_review', FALSE, TRUE, t('Proceed to review page'));
  //   drupal_goto('checkout/' . $order->order_id . '/review');
  //   watchdog('checkoutpayment_return_url', '!charge', array('!charge' => $object_charge->getRawRespond()), WATCHDOG_WARNING);
  // }

}

/**
 * Process payment with card token
 */
function ubercart_checkoutpayment_process_charge(){ //TODO

  if($_REQUEST['cko-card-token']){
    $cardToken = $_REQUEST['cko-card-token'];

    if($_SESSION['cko_contextid'] != null){
      $order = uc_order_load($_SESSION['cko_contextid']);
    } else {
      drupal_goto();
    }
  }

  module_load_include('php', 'ubercart_checkoutpayment', 'includes/autoload');

  $payment_method = ubercart_checkoutpayment_payment_method();
  $settings       = $payment_method['settings'];

  $instance = ubercart_checkoutpayment_get_instance();
  $data     = $instance->getExtraInit($order, $payment_method);

  $Api = CheckoutApi_Api::getApi(array('mode'=>$settings['mode']));

  $transactionMethod  = $settings['payment_action'];
  $autoCapture        = $transactionMethod == 'authorize' ? CheckoutApi_Client_Constant::AUTOCAPUTURE_AUTH : CheckoutApi_Client_Constant::AUTOCAPUTURE_CAPTURE;  
  $autoCapTime        = $settings['autocaptime'];
  $chargeMode         = $settings['is3D'];

  $order_total  = $data['script']['amount'];
  $currency     = $data['script']['currency'];

  // $billing_address = get_address($order, 'billing');
  $customerName       = $data['script']['name'];
  $email              = $data['script']['email'];
    
  if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
      $ip = $_SERVER['HTTP_CLIENT_IP'];
  } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
      $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
  } else {
      $ip = $_SERVER['REMOTE_ADDR'];
  }

  $config = array();
  $config['postedParam'] = array (
      'trackId'           => $order->order_id,
      'value'             => $order_total,
      'currency'          => $currency,
      'autoCapture'       => $autoCapture,
      'chargeMode'        => $chargeMode,
      'customerIp'        => $ip,
      'autoCapTime'       => $autoCapTime,
      'email'             => $email,
      'customerName'      => $customerName,
      'metadata'          => array(
           'server'            => $_SERVER['HTTP_USER_AGENT'],
           'plugin_version'    => CHECKOUT_API_PLUGIN_VERSION,
      //     'lib_version'       => CheckoutApi_Client_Constant::LIB_VERSION,
           'integration_type'  => 'Hosted',
           'time'              => date('Y-m-d H:i:s'),
           'instanceId'        => $order->order_id
      ),
      'cardToken'         => $cardToken
  );

  $config['authorization'] = $settings['private_key'];
  $config['mode']          = $settings['mode'];

  if (!empty($products)) {
    $config['postedParam']['products'] = $products;
  }

  // if (module_exists('commerce_shipping') && !empty($order_wrapper->commerce_customer_shipping->commerce_customer_address)) {
  //     $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();

  //     // Add the shipping address parameters to the request.
  //     $shipping_array = array(
  //       'addressLine1' => $shipping_address['thoroughfare'],
  //       'addressLine2' => $shipping_address['premise'],
  //       'postcode' => $shipping_address['postal_code'],
  //       'country' => $shipping_address['country'],
  //       'city' => $shipping_address['locality'],
  //     );

  //     $config['postedParam']['shippingDetails'] = $shipping_array;
  // }
  

  $result = $Api->createCharge($config);

  if ($Api->getExceptionState()->hasError()) {
    drupal_set_message(t('An error has occured while processing your transaction. Please verify your information again or try a different card.'), 'error');
    drupal_goto('cart/checkout/review');
  }  

  if ($result->isValid() && responseValidation($result)) {
    $output = uc_cart_complete_sale($order);

    if((int)$result->getResponseCode() == 10100){
      $message = 'Your transaction has been flagged - chargeId : ' . $result->getId();
    }
  } 
  else {
    switch((int)$result->getResponseCode()){
      case 20051 :
        $message = 'You have insufficient funds. Please try again with more funds or try a different card.';
        break;
      case 20054 : 
        $message = 'The card you used is expired. Please try again with a different card.';
        break;
      default :
        $message = 'An error has occured while processing your transaction. Please verify your information again or try a different card.';
    }

    ubercart_checkoutpayment_fail_order($message);
  }

  return $output;
}
  
function ubercart_checkoutpayment_fail_order($message = "An error has occured. Your order has been canceled."){
  if(!$_SESSION['cko_contextid']){
      drupal_goto();
  }
  else {
    $order = uc_order_load($_SESSION['cko_contextid']);
  }

  drupal_set_message(t($message), 'error');
  drupal_goto('cart/checkout/review');
}

function ubercart_checkoutpayment_process_order() { 
  $post_data = file_get_contents('php://input');
  if ($post_data) {

    module_load_include('php', 'ubercart_checkoutpayment', 'includes/autoload');

    $payment_method = ubercart_checkoutpayment_payment_method();
    
    // Check if the authentication is right.
    $headers = getallheaders();
    if($headers['Authorization'] != $payment_method['settings']['webhook_key']) return http_response_code(400);

    // Process the data
    $jsondata = json_decode($post_data);
    $eventType = $jsondata->eventType;
    
    $cko_contextid = $jsondata->message->trackId;
    $order = uc_order_load($cko_contextid);

    $instance = ubercart_checkoutpayment_get_instance();
    $data     = $instance->getExtraInit($order, $payment_method);

    $api = CheckoutApi_Api::getApi(array('mode' => $payment_method['settings']['mode']));
    $object_charge = $api->chargeToObj($post_data);

    if ($object_charge->isValid()) {

      $order_total = $data['script']['amount'] / 100;

      switch($eventType){
        case EVENT_TYPE_CHARGE_SUCCEEDED :
          uc_order_update_status($order->order_id, 'cko_authorised');
          uc_order_comment_save($order->order_id, 0, t('Payment authorised.'), 'admin');
          return http_response_code(200);
        
        case EVENT_TYPE_CHARGE_CAPTURED :
          $captured = $object_charge->getValue() / 100;

          if($captured == $order_total){
            uc_order_update_status($order->order_id, 'payment_received');
            $comment = 'Payment recieved.';
          } elseif ($captured < $order_total) {
            uc_order_update_status($order->order_id, 'cko_part_captured');
            $comment = 'Partial payment recieved. (' . $captured . ' recieved instead of ' . $order_total . ')';
          } else {
            uc_order_update_status($order->order_id, 'payment_received');
            $comment = 'Payment recieved with extra funds. (' . $captured . ' recieved instead of ' . $order_total . ')';
          }

          uc_order_comment_save($order->order_id, 0, t($comment), 'admin');
          uc_payment_enter($order->order_id, 'free_order', $captured, 0, NULL, $comment);

          return http_response_code(200);
        
        case EVENT_TYPE_CHARGE_REFUNDED :
          $refunded = $object_charge->getValue() / 100;

          if($refunded == $order_total){
            uc_order_update_status($order->order_id, 'cko_refunded');
            $comment = t('Payment fully refunded.');
          } elseif ($refunded < $order_total) {
            uc_order_update_status($order->order_id, 'cko_part_refunded');
            $comment = t('Payment partially refunded. (' . $refunded . ' of ' . $order_total . ')');
          } else {
            uc_order_update_status($order->order_id, 'cko_refunded');
            $comment = t('Payment refunded with compensation. (' . $refunded . ' refunded instead of ' . $order_total . ')');
          }

          uc_order_comment_save($order->order_id, 0, t($comment), 'admin');
          uc_payment_enter($order->order_id, 'free_order', -$refunded, 0, NULL, $comment);

          return http_response_code(200);

        case EVENT_TYPE_CHARGE_VOIDED :
          uc_order_update_status($order->order_id, 'canceled');
          uc_order_comment_save($order->order_id, 0, t('Payment voided.'), 'admin');
          return http_response_code(200);

        case EVENT_TYPE_INVOICE_CANCELLED :
          uc_order_update_status($order->order_id, 'canceled');
          uc_order_comment_save($order->order_id, 0, t('Payment cancelled.'), 'admin');
          return http_response_code(200);

        default :
          return http_response_code(400);
      }
    }
  }
  
  return NULL;
}

/**
 * Own methods to reduce wrong entries
 */
function ubercart_checkoutpayment_payment_method(){
  $payment_method = array();

  if(variable_get('autocaptime') == '') variable_set('autocaptime', 0);

  $payment_method['settings'] = array(
    'private_key'    => variable_get('private_key', ''),
    'public_key'     => variable_get('public_key', ''),
    'webhook_key'    => variable_get('webhook_key', ''),
    'mode'           => variable_get('mode', 'live'),
    'payment_action' => variable_get('payment_action', ''),
    'autocaptime'    => variable_get('autocaptime', 0),
    'paymentMode'    => variable_get('paymentMode', 'mixed'),
    'type'           => variable_get('type', 'pci'),
    'is3D'           => variable_get('is3D', false),
    'timeout'        => variable_get('timeout', 60),
    'logourl'        => variable_get('logourl', ''),
    'themecolor'     => variable_get('themecolor', ''),
    'title'          => variable_get('title', variable_get('site_name', "Default site name")),
    'subtitle'       => variable_get('subtitle', ''),
    'button_label'   => variable_get('button_label', ''),
    'currencycode'   => variable_get('currencycode', 'false'),
    'cko_language'   => variable_get('cko_language', '')
  );

  return $payment_method;
}
